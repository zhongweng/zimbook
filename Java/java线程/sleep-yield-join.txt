Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-06T14:41:04+08:00

====== sleep-yield-join ======
Created 星期一 06 三月 2017

===== 线程的优先权 =====

	理解线程优先级是多线程学习很重要的一步，尤其是了解yield()函数的工作过程。
	
	记住当线程的优先级没有指定时，所有线程都携带普通优先级。
	优先级可以用从1到10的范围指定。10表示最高优先级，1表示最低优先级，5是普通优先级。
	**记住优先级最高的线程在执行时被给予优先。但是不能保证线程在启动时就进入运行状态。**
	与在线程池中等待运行机会的线程相比，当前正在运行的线程可能总是拥有更高的优先级。
	由调度程序决定哪一个线程被执行。
	t.setPriority()用来设定线程的优先级。
	记住在线程开始方法被调用之前，线程的优先级应该被设定。
	你可以使用常量，如MIN_PRIORITY,MAX_PRIORITY，NORM_PRIORITY来设定优先级

===== sleep =====
	**Thread 静态方法**
	**使当前线程(即调用该方法的线程)暂停执行一段时间**，**让其他线程有机会继续执行**，**但它并不释放对象锁**。**也就是如果有Synchronized同步块，其他线程仍然不同访问共享数据。注意该方法要捕获异常**
	
	比如有两个线程同时执行(没有Synchronized)，一个线程优先级为MAX_PRIORITY，另一个为MIN_PRIORITY，如果没有Sleep()方法，只有高优先级的线程执行完成后，低优先级的线程才能执行；但当高优先级的线程sleep(5000)后，低优先级就有机会执行了。
	
	总之，sleep()可以使低优先级的线程得到执行的机会，当然也可以让同优先级、高优先级的线程有执行的机会。


===== yield =====
	**yield 是Thread　中的静态本地方法**

==== 定义 ====
	
	/**
	  * A hint to the scheduler that the current thread is willing to yield its current use of a processor. The scheduler is free to ignore
	  * this hint. Yield is a heuristic attempt to improve relative progression between threads that would otherwise over-utilize a CPU.
	  * Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect.
	  */
	 
	public static native void yield();

	让我们列举一下关于以上定义重要的几点：
	
	* **Yield是一个静态的原生(native)方法**
	* **Yield告诉当前正在执行的线程把运行机会交给线程池中拥有相同优先级的线程。**
	* **Yield不能保证使得当前正在运行的线程迅速转换到可运行的状态**
	* **它仅能使一个线程从运行状态转到可运行状态，而不是等待或阻塞状态**

==== 实例 ====
	生产者设定为最小优先级，消费者设定为最高优先级。在Thread.yield()注释和非注释的情况下分别运行该程序。没有调用yield()方法时，虽然输出有时改变，但是通常消费者行先打印出来，然后事生产者。
	调用yield()方法时，两个线程依次打印，然后将执行机会交给对方，一直这样进行下去。
{{{code: lang="java" linenumbers="True"
public class YieldExample
{
   public static void main(String[] args)
   {
      Thread producer = new Producer();
      Thread consumer = new Consumer();
 
      producer.setPriority(Thread.MIN_PRIORITY); //Min Priority
      consumer.setPriority(Thread.MAX_PRIORITY); //Max Priority
 
      producer.start();
      consumer.start();
   }
}
 
class Producer extends Thread
{
   public void run()
   {
      for (int i = 0; i < 5; i++)
      {
         System.out.println("I am Producer : Produced Item " + i);
         Thread.yield();
      }
   }
}
 
class Consumer extends Thread
{
   public void run()
   {
      for (int i = 0; i < 5; i++)
      {
         System.out.println("I am Consumer : Consumed Item " + i);
         Thread.yield();
      }
   }
}
}}}
	

===== join =====


	join()方法使调用该方法的线程在此之前执行完毕，也就是等待调用该方法的线程执行完毕后再往下继续执行。注意该方法也要捕获异常。
	**join() 定义在Thread.java中。**
	join() 的作用：让“主线程”等待“子线程”结束之后才能继续运行。这句话可能有点晦涩，我们还是通过例子去理解：
	
	**// 主线程**
	**public class Father extends Thread {**
	**    public void run() {**
	**        Son s = new Son();**
	**        s.start();**
	**        s.join();**
	**        ...**
	**    }**
	**}**
	**// 子线程**
	**public class Son extends Thread {**
	**    public void run() {**
	**        ...**
	**    }**
	**}**
	
	join方法的作用是父线程等待子线程执行完成后再执行，换句话说就是将异步执行的线程合并为同步的线程。JDK中提供三个版本的join方法，其实现与wait方法类似，join()方法实际上执行的join(0)，而join(long millis, int nanos)也与wait(long millis, int nanos)的实现方式一致，暂时对纳秒的支持也是不完整的。我们可以看下join方法的源码，这样更容易理解：
	
{{{code: lang="java" linenumbers="True"
public final void join() throws InterruptedException {
        join(0);
    }

 public final synchronized void join(long millis)
    throws InterruptedException {
        long base = System.currentTimeMillis();
        long now = 0;

        if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
        }

        if (millis == 0) {
            while (isAlive()) {
                wait(0);
            }
        } else {
            while (isAlive()) {
                long delay = millis - now;
                if (delay <= 0) {
                    break;
                }
                wait(delay);
                now = System.currentTimeMillis() - base;
            }
        }
    }

public final synchronized void join(long millis, int nanos)
    throws InterruptedException {

        if (millis < 0) {
            throw new IllegalArgumentException("timeout value is negative");
        }

        if (nanos < 0 || nanos > 999999) {
            throw new IllegalArgumentException(
                                "nanosecond timeout value out of range");
        }

        if (nanos >= 500000 || (nanos != 0 && millis == 0)) {
            millis++;
        }

        join(millis);
    }
}}}
	
	问题：
	**虽然s.join()被调用的地方是发生在“Father主线程”中，但是s.join()是通过“子线程s”去调用的join()。那么，join()方法中的isAlive()应该是判断“子线程s”是不是Alive状态；对应的wait(0)也应该是“让子线程s”等待才对。但如果是这样的话，s.join()的作用怎么可能是“让主线程等待，直到子线程s完成为止”呢，应该是让"子线程等待才对(因为调用子线程对象s的wait方法嘛)"？**
	答案：**wait()的作用是让“当前线程”等待，而这里的“当前线程”是指当前在CPU上运行的线程。所以，虽然是调用子线程的wait()方法，但是它是通过“主线程”去调用的；所以，休眠的是主线程，而不是“子线程”！**
	
	可以看出**join方法就是通过wait方法来将线程的阻塞，如果join的线程还在执行，则将当前线程阻塞起来，直到join的线程执行完成，当前线程才能执行。**不过有一点需要注意，**这里的join只调用了wait方法，却没有对应的notify方法，原因是Thread的start方法中做了相应的处理，所以当join的线程执行完成以后，会自动唤醒主线程继续往下执行。**










