Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-02T15:01:28+08:00

====== Atom类 ======
Created 星期四 02 三月 2017

===== Atomic原子操作 =====

	Java从JDK1.5开始提供了**java.util.concurrent.atomic**包，方便程序员在多线程环境下，**无锁的进行原子操作。原子变量的底层使用了处理器提供的原子指令**，但是不同的CPU架构可能提供的原子指令不一样，也有可能需要某种形式的内部锁,所以**该方法不能绝对保证线程不被阻塞**。
	Atomic，则表示这段代码在执行过程中，是不能被中断的。通常来说，原子指令由硬件提供，供软件来实现原子方法（某个线程进入该方法后，就不会被中断，直到其执行完成）
	
	无论是直接的还是间接的，**几乎 Java.util.concurrent 包中的所有类都使用原子变量，而不使用同步**。类似 ConcurrentLinkedQueue 的类也使用原子变量直接实现无等待算法，而类似 ConcurrentHashMap 的类使用 ReentrantLock 在需要时进行锁定。然后， ReentrantLock 使用原子变量来维护等待锁定的线程队列。
	
	CAS 的指令允许算法执行读-修改-写操作，而无需害怕其他线程同时修改变量，因为如果其他线程修改变量，那么 CAS 会检测它（并失败），算法可以对该操作重新计算。


==== 使用锁定实现计数器和互斥 ====
	假如开发线程安全的计数器类，那么这将暴露 get()、 increment() 和 decrement() 操作。如下:
{{{code: lang="java" linenumbers="True"
public class SynchronizedCounter {
    private int value;
    public synchronized int getValue() { return value; }
    public synchronized int increment() { return ++value; }
    public synchronized int decrement() { return --value; }
}
}}}
	
	increment() 和 decrement() 操作是原子的读-修改-写操作，为了安全实现计数器，必须使用当前值，并为其添加一个值，或写出新值，所有这些均视为一项操作，其他线程不能打断它。否则，如果两个线程试图同时执行增加，操作的不幸交叉将导致计数器只被实现了一次，而不是被实现两次。（注意，通过使值实例变量成为可变变量并不能可靠地完成这项操作。）
	**同步计数器类可以可靠地工作，在竞争很小或没有竞争时都可以很好地执行。然而，在竞争激烈时，这将大大损害性能**，因为 JVM 用了更多的时间来调度线程，管理竞争和等待线程队列，而实际工作（如增加计数器）的时间却很少
	**使用锁定，如果一个线程试图获取其他线程已经具有的锁定，那么该线程将被阻塞，直到该锁定可用。此方法具有一些明显的缺点，其中包括当线程被阻塞来等待锁定时，它无法进行其他任何操作。如果阻塞的线程是高优先级的任务，那么该方案可能造成非常不好的结果**（称为 优先级倒置的危险）。
	**使用锁定还有一些其他危险，如死锁**（当以不一致的顺序获得多个锁定时会发生死锁）。甚至没有这种危险，锁定也仅是相对的粗粒度协调机制，同样非常适合管理简单操作，如增加计数器或更新互斥拥有者。如果有更细粒度的机制来可靠管理对单独变量的并发更新，则会更好一些；在大多数现代处理器都有这种机制。


==== 硬件同步原语 ====
	几乎每个现代处理器都有通过可以**检测或阻止其他处理器的并发访问的方式来更新共享变量**的指令。

=== 比较并交换 (CAS) ===
	现在的处理器（包括 Intel 和 Sparc 处理器）使用的最通用的方法是实现名为 比较并转换或 CAS 的原语.
	CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。**如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。**无论哪种情况，它都会在 CAS 指令之前返回该位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”
	**通常将 CAS 用于同步的方式是从地址 V 读取值 A，执行多步计算来获得新值 B，然后使用 CAS 将 V 的值从 A 改为 B。如果 V 处的值尚未同时更改，则 CAS 操作成功。**
	**类似于 CAS 的指令允许算法执行读-修改-写操作，而无需害怕其他线程同时修改变量，因为如果其他线程修改变量，那么 CAS 会检测它（并失败），算法可以对该操作重新计算。**清单 3 说明了 CAS 操作的行为（而不是性能特征），但是 CAS 的价值是它可以在硬件中实现，并且是极轻量级的（在大多数处理器中）：
	**清单 3. 说明比较并交换的行为（而不是性能）的代码(!!!CAS在硬件机器指令可以支持了,这里只是用代码模拟一下原理)**
{{{code: lang="java" linenumbers="True"
public class SimulatedCAS {
     private int value;

     public synchronized int getValue() { return value; }

	public synchronized int compareAndSwap(int expectedValue, int newValue) {
         int oldValue = value;
         //是否为预期值
         if (value == expectedValue)
         	//是预期值 则换为新值
             value = newValue;
         //总是返回就旧值
         return oldValue;
     }
}
}}}
	

=== 使用 CAS 实现计数器 ===
	**基于 CAS 的并发算法称为 无锁定算法**，因为线程不必再等待锁定（有时称为互斥或关键部分，这取决于线程平台的术语）。无论 CAS 操作成功还是失败，在任何一种情况中，它都在可预知的时间内完成。如果 CAS 失败，调用者可以重试 CAS 操作或采取其他适合的操作。清单 4 显示了重新编写的计数器类来使用 CAS 替代锁定：
	**清单 4. 使用比较并交换实现计数器**
{{{code: lang="java" linenumbers="True"
public class CasCounter {
    private SimulatedCAS value;
    public int getValue() {
        return value.getValue();
    }
    public int increment() {
        int oldValue = value.getValue();
        while (value.compareAndSwap(oldValue, oldValue + 1) != oldValue)
            oldValue = value.getValue();
        return oldValue + 1;
    }
}
}}}
	
	
===== 主要用途 =====

==== 多线程高并发的非阻塞计数器 ====
	
	AtomicBoolean，AtomicInteger，AtomicLong，AtomicReference
	
	AtomicIntegerArray，AtomicLongArray
	
	AtomicLongFieldUpdater，AtomicIntegerFieldUpdater，AtomicReferenceFieldUpdater
	
	AtomicMarkableReference，AtomicStampedReference，AtomicReferenceArray
	
	Atomic包提供了三种基本类型的原子更新，但是Java的基本类型里还有char，float和double等。那么问题来了，**如何原子的更新其他的基本类型呢**？

	Atomic包里的类基本都是使用Unsafe实现的，让我们一起看下Unsafe的源码，发现Unsafe只提供了三种CAS方法，compareAndSwapObject，compareAndSwapInt和compareAndSwapLong，再看AtomicBoolean源码，发现其是**先把Boolean转换成整型，再使用compareAndSwapInt进行CAS**，所以原子更新double也可以用类似的思路来实现。
	
	**Atomic类的作用 使得让对单一数据的操作，实现了原子化**
	
	使用Atomic类构建复杂的，无需阻塞的代码
	
	访问对2个或2个以上的atomic变量（或者对单个atomic变量进行2次或2次以上的操作）通常认为是需要同步的，以达到让这些操作能被作为一个原子单元。
	**清单 1. 使用同步的线程安全的计数器**
{{{code: lang="java" linenumbers="True"
public final class Counter {
    private long value = 0;
    public synchronized long getValue() {
        return value;
    }
    public synchronized long increment() {
        return ++value;
    }
}
}}}
	
	**清单 2. 使用 CAS 的非阻塞算法**
{{{code: lang="java" linenumbers="True"
public class NonblockingCounter {
    private AtomicInteger value;
    public int getValue() {
        return value.get();
    }
    public int increment() {
        int v;
        do {
            v = value.get();
        while (!value.compareAndSet(v, v + 1));
        return v + 1;
    }
}
}}}
	


==== 非阻塞堆栈 ====
	非阻塞算法稍微复杂一些的示例是清单 3 中的 ConcurrentStack。ConcurrentStack 中的 push() 和 pop() 操作在结构上与 NonblockingCounter 上相似，只是做的工作有些冒险，希望在 “提交” 工作的时候，底层假设没有失效。push() 方法观察当前最顶的节点，构建一个新节点放在堆栈上，然后，如果最顶端的节点在初始观察之后没有变化，那么就安装新节点。如果 CAS 失败，意味着另一个线程已经修改了堆栈，那么过程就会重新开始。
{{{code: lang="java" linenumbers="True"
public class ConcurrentStack<E> {
    AtomicReference<Node<E>> head = new AtomicReference<Node<E>>();
    public void push(E item) {
        Node<E> newHead = new Node<E>(item);
        Node<E> oldHead;
        do {
            oldHead = head.get();
            newHead.next = oldHead;
        } while (!head.compareAndSet(oldHead, newHead));
    }
    public E pop() {
        Node<E> oldHead;
        Node<E> newHead;
        do {
            oldHead = head.get();
            if (oldHead == null) 
                return null;
            newHead = oldHead.next;
        } while (!head.compareAndSet(oldHead,newHead));
        return oldHead.item;
    }
    static class Node<E> {
        final E item;
        Node<E> next;
        public Node(E item) { this.item = item; }
    }
}
}}}
	
	
==== 使用Atomic类构建复杂的，无需阻塞的代码 ====
	访问对2个或2个以上的atomic变量（或者对单个atomic变量进行2次或2次以上的操作）通常认为是需要同步的，以达到让这些操作能被作为一个原子单元。
	
==== 无锁定且无等待算法 ====
	基于 **CAS （compare and swap）的并发算法称为 无锁定算法**，因为线程不必再等待锁定（有时称为互斥或关键部分，这取决于线程平台的术语）。无论 CAS 操作成功还是失败，在任何一种情况中，它都在可预知的时间内完成。如果 CAS 失败，调用者可以重试 CAS 操作或采取其他适合的操作。
	如果每个线程在其他线程任意延迟（或甚至失败）时都将持续进行操作，就可以说该算法是 无等待的。与此形成对比的是， 无锁定算法要求仅 某个线程总是执行操作。（无等待的另一种定义是保证每个线程在其有限的步骤中正确计算自己的操作，而不管其他线程的操作、计时、交叉或速度。这一限制可以是系统中线程数的函数；例如，如果有 10 个线程，每个线程都执行一次CasCounter.increment() 操作，最坏的情况下，每个线程将必须重试最多九次，才能完成增加。）
	再过去的 15 年里，人们已经对无等待且无锁定算法（也称为 无阻塞算法）进行了大量研究，许多人通用数据结构已经发现了无阻塞算法。无阻塞算法被广泛用于操作系统和 JVM 级别，进行诸如线程和进程调度等任务。虽然它们的实现比较复杂，但相对于基于锁定的备选算法，它们有许多优点：可以避免优先级倒置和死锁等危险，竞争比较便宜，协调发生在更细的粒度级别，允许更高程度的并行机制等等。
	常见的：
	**非阻塞的计数器Counter **
	**非阻塞堆栈ConcurrentStack**
	**非阻塞的链表ConcurrentLinkedQueue**
	
===== 使用实例 =====

==== 原子更新基本类型类 ====
	
	用于通过原子的方式更新基本类型，Atomic包提供了以下三个类：
	
	**AtomicBoolean：原子更新布尔类型。**
	**AtomicInteger：原子更新整型。**
	**AtomicLong：原子更新长整型。**
	
	AtomicInteger的常用方法如下：
	
	int addAndGet(int delta) ：以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果
	boolean compareAndSet(int expect, int update) ：如果输入的数值等于预期值，则以原子方式将该值设置为输入的值。
	int getAndIncrement()：以原子方式将当前值加1，注意：这里返回的是自增前的值。
	void lazySet(int newValue)：最终会设置成newValue，使用lazySet设置值后，可能导致其他线程在之后的一小段时间内还是可以读到旧的值。关于该方法的更多信息可以参考并发网翻译的一篇文章《AtomicLong.lazySet是如何工作的？》
	int getAndSet(int newValue)：以原子方式设置为newValue的值，并返回旧值。
	AtomicInteger例子代码如下：
{{{code: lang="java" linenumbers="True"
static AtomicInteger ai = new AtomicInteger(1);

public static void main(String[] args){

	System.out.println(a1.getAndIncrement());
}
}}}
	
	
==== 原子更新数组类 ====
	通过原子的方式更新数组里的某个元素，Atomic包提供了以下三个类：
	
	**AtomicIntegerArray：原子更新整型数组里的元素。**
	**AtomicLongArray：原子更新长整型数组里的元素。**
	**AtomicReferenceArray：原子更新引用类型数组里的元素。**
	
	AtomicIntegerArray类主要是提供原子的方式更新数组里的整型，其常用方法如下
	
	int addAndGet(int i, int delta)：以原子方式将输入值与数组中索引i的元素相加。
	boolean compareAndSet(int i, int expect, int update)：如果当前值等于预期值，则以原子方式将数组位置i的元素设置成update值。
	实例代码如下：
	
{{{code: lang="java" linenumbers="True"
public class AtomicIntegerArrayTest {

    static int[] value = new int[] { 1, 2 };
    static AtomicIntegerArray ai = new AtomicIntegerArray(value);

    public static void main(String[] args) {
        ai.getAndSet(0, 3);
        System.out.println(ai.get(0));
        System.out.println(value[0]);
    }
}

}}}
	


==== 原子更新引用类型 ====
	原子更新基本类型的AtomicInteger，只能更新一个变量，如果要原子的更新多个变量，就需要使用这个原子更新引用类型提供的类。Atomic包提供了以下三个类：
	
	**AtomicReference：原子更新引用类型。**
	**AtomicReferenceFieldUpdater：原子更新引用类型里的字段。**
	**AtomicMarkableReference：原子更新带有标记位的引用类型。可以原子的更新一个布尔类型的标记位和引用类型。构造方法是AtomicMarkableReference(V initialRef, boolean initialMark)**
	
	
==== 原子更新字段类 ====
	如果我们只需要某个类里的某个字段，那么就需要使用原子更新字段类，Atomic包提供了以下三个类：
	
	AtomicIntegerFieldUpdater：原子更新整型的字段的更新器。
	AtomicLongFieldUpdater：原子更新长整型字段的更新器。
	AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于原子的更数据和数据的版本号，可以解决使用CAS进行原子更新时，可能出现的ABA问题。
	原子更新字段类都是抽象类，每次使用都时候必须使用静态方法newUpdater创建一个更新器。原子更新类的字段的必须使用public volatile修饰符。
	





