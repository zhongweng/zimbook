Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-01T09:05:41+08:00

====== Lock接口 ======
Created 星期三 01 三月 2017

lock可以说是 synchronized 的一个替代品，synchronized 能做的事，lock 基本都可以做，而且能做得更好。他们的一些区别是：

	* **lock在获取锁的过程可以被中断。**
	* **lock可以尝试获取锁，如果锁被其他线程持有，则返回 false，不会使当前线程休眠。**
	* **lock在尝试获取锁的时候，传入一个时间参数，如果在这个时间范围内，没有获得锁，那么就是终止请求。**
	* **synchronized 会自动释放锁，lock 则不会自动释放锁。**

这样可以看到，lock 比起 synchronized 具有更细粒度的控制。但是也不是说 lock 就完全可以取代 synchronized，因为 lock 的学习成本，复杂度等方面要比 synchronized 高，对于初级 java 程序员，使用 synchronized 的风险要比 lock 低。

==== Java Lock接口源码分析 ====

{{{code: lang="java" linenumbers="True"
public interface Lock {
    void lock();
    void lockInterruptibly() throws InterruptedException;
    boolean tryLock();
    boolean tryLock(long time, TimeUnit unit) throws InterruptedException;
    void unlock();
    Condition newCondition();
}
}}}


==== lock，unlock 方法 ====
lock() 可以用于对一段代码进行加锁，这样别的代码在锁释放之前需要进行等待，需要注意， lock不会像 synchronized 那样自动释放锁 ，所以： 一定要放在 try-finally块中，保证锁的释放。 例如：

try {
	lock.lock();
	......
} finally {
	lock.unlock();  
}

==== tryLock 方法 ====
tryLock()：尝试获得锁，如果成功，返回 true，否则，返回 false。
tryLock(long time,TimeUnit unit)：在一定的时间内尝试获得锁，并且在这段时间直接可以被打断。如果成功获得，那么将返回 true，否则，返回 false。

==== lockInterruptibly 方法 ====
这里首先需要了解两个概念才能更好的理解这个方法：

	**线程的打断机制**
	**Thread类的interrupt,interrupted,isInterrupted方法的区别**
	
对于线程的打断机制， 每个线程都有一个打断标志。

	**如果线程在 sleep 或 wait 或 join 的时候，此时如果别的进程调用此线程的 interrupt() 方法，此线程会被唤醒并被要求处理InterruptedException；**
	**如果线程在运行，则不会收到提醒。但是 此线程的 “打断标志” 会被设置。**
	
所以说，对于 interrupt() 方法：

	**不会中断一个正在运行的线程 。**
	**不会中断一个正在运行的线程 。**
	**不会中断一个正在运行的线程** 。
	
对于 interrupt,interrupted,isInterrupted方法的区别：

interrupt 方法上面有说到了。对于 interrupted 和 isInterrupted 方法,stackoverflow 说得很好了：
{{{code: lang="java" linenumbers="True"
interrupted() is static and checks the current thread. isInterrupted() is an instance method 
which checks the Thread object that it is called on.

A common error is to call a static method on an instance.

Thread myThread = ...;
if (myThread.interrupted()) {} // WRONG! This might not be checking myThread.
if (myThread.isInterrupted()) {} // Right!

Another difference is that interrupted() also clears the status of the current thread. 
In other words, if you call it twice in a row and the thread is not interrupted 
between the two calls, the second call will return false even if the first call returned true.

The Javadocs tell you important things like this; use them often!
}}}
	
lockInterruptibly 方法：

	当通过这个方法去获取锁时，如果线程正在等待获取锁，则这个线程能够响应中断，即中断线程的等待状 态。例如当两个线程同时通过lock.lockInterruptibly()想获取某个锁时，假若此时线程A获取到了锁，而线程B只有在等待，那 么对线程B调用threadB.interrupt()方法能够中断线程B的等待过程。


===== ReentrantLock =====

可重入锁：指同一个线程，外层函数获得锁之后，内层递归函数仍有获得该锁的代码，但是不受影响。

**可重入锁的最大作用就是 可以避免死锁。**
	 例如：A线程 有两个方法 a 和 b，其中 a 方法会调用 b 方法，假如 a，b 两个方法都需要获得锁，那么首先 a 方法先执行，会获得锁，此时 b方法将永远获得不了锁，b 方法将一直阻塞住， a 方法由于 b 方法没有执行完，它本身也 不释放锁，此时就会造成一个 死锁。
**ReentrantLock 就是一个可重入锁**。真正使用 锁的时候，一般是 Lock lock ＝ new ReentrantLock()； 然后 使用 Lock 接口方法。

==== ReentrantLock与synchronized的比较 ====

相同：ReentrantLock提供了synchronized类似的功能和内存语义。
不同：
（1）ReentrantLock功能性方面更全面，比如时间锁等候，可中断锁等候，锁投票等，因此更有扩展性。在多个条件变量和高度竞争锁的地方，用ReentrantLock更合适，ReentrantLock还提供了Condition，对线程的等待和唤醒等操作更加灵活，**一个ReentrantLock可以有多个Condition实例，所以更有扩展性**。
（2）ReentrantLock 的**性能**比synchronized会好点。
（3）**ReentrantLock提供了可轮询的锁请求，他可以尝试的去取得锁**，如果取得成功则继续处理，取得不成功，可以等下次运行的时候处理，所以不容易产生死锁，而synchronized则一旦进入锁请求要么成功，要么一直阻塞，所以更容易产生死锁。


==== 实现可轮询的锁请求 ====
	在内部锁中，死锁是致命的——唯一的恢复方法是重新启动程序，唯一的预防方法是在构建程序时不要出错。而可轮询的锁获取模式具有更完善的错误恢复机制，可以规避死锁的发生。 
	如果你不能获得所有需要的锁，那么使用可轮询的获取方式使你能够重新拿到控制权，它会释放你已经获得的这些锁，然后再重新尝试。可轮询的锁获取模式，由tryLock()方法实现。此方法仅在调用时锁为空闲状态才获取该锁。如果锁可用，则获取锁，并立即返回值true。如果锁不可用，则此方法将立即返回值false。此方法的典型使用语句如下： 
	
{{{code: lang="java" linenumbers="True"
Lock lock = ...;   
if (lock.tryLock()) {   
	try {   
		// manipulate protected state   
	} finally {   
		lock.unlock();   
	}   
} else {   
// perform alternative actions   
}  
}}}
	


==== 实现可定时的锁请求 ====

	当使用内部锁时，一旦开始请求，锁就不能停止了，所以内部锁给实现具有时限的活动带来了风险。为了解决这一问题，可以使用定时锁。当具有时限的活 
	动调用了阻塞方法，定时锁能够在时间预算内设定相应的超时。如果活动在期待的时间内没能获得结果，定时锁能使程序提前返回。可定时的锁获取模式，由tryLock(long, TimeUnit)方法实现。 


==== 实现可中断的锁获取请求 ====

	可中断的锁获取操作允许在可取消的活动中使用。lockInterruptibly()方法能够使你获得锁的时候响应中断。
	
	


===== ReadWriteLock =====
	
	接口代码如下：
	
	**public interface ReadWriteLock {  **
	**    Lock readLock();  **
	**    Lock writeLock();  **
	**}**  
	ReadWriteLock 可以算是 Lock 的一个细分，合理使用有利于提高效率。比如说， 对于一个变量 i， A，B 线程同时读，那么不会造成错误的结果，所以此时是允许并发，但是如果是同时写操作，那么则是有可能造成错误。所以真正使用的时候，可以使用 细分需要的是读锁还是写锁，再相应地进行加锁。
	
	**Ps： 从代码也可以看出，ReadWriteLock 和 Lock 没有关系，既不继承，也不是实现。**
	

===== Condition =====

Condition 用 await() 代替了 Object 的 wait() 方法，用 signal() 方法代替 notify() 方法。 注意：Condition 是被绑定到 Lock 中，要创建一个 Lock 的 Condition 必须用 newCondition() 方法。

**Condition 在生产者消费者模型中的代码Demo**
{{{code: lang="java" linenumbers="True"
class BoundedBuffer {      
    final Lock lock = new ReentrantLock();//锁对象      
    final Condition notFull  = lock.newCondition();//写线程条件       
    final Condition notEmpty = lock.newCondition();//读线程条件       

    final Object[] items = new Object[100];//缓存队列      
    int putptr/*写索引*/, takeptr/*读索引*/, count/*队列中存在的数据个数*/;      

    public void put(Object x) throws InterruptedException {      
        lock.lock();      
        try {      
            while (count == items.length)//如果队列满了       
                notFull.await();//阻塞写线程      
            items[putptr] = x;//赋值       
            if (++putptr == items.length) putptr = 0;//如果写索引写到队列的最后一个位置了，那么置为0      
            ++count;//个数++      
            notEmpty.signal();//唤醒读线程      
        } finally {      
            lock.unlock();      
        }      
    }      

    public Object take() throws InterruptedException {      
        lock.lock();      
        try {      
            while (count == 0)//如果队列为空      
                notEmpty.await();//阻塞读线程      
            Object x = items[takeptr];//取值       
            if (++takeptr == items.length) takeptr = 0;//如果读索引读到队列的最后一个位置了，那么置为0      
            --count;//个数--      
            notFull.signal();//唤醒写线程      
            return x;      
        } finally {      
            lock.unlock();      
        }      
    }       
} 
}}}

	
	**这样由于阻塞该阻塞的，唤醒该唤醒的，阻塞该阻塞的，所以能提高效率.**
	
	
	
	
	
	
	
	
	
	
	
	

