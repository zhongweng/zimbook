Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-20T13:42:22+08:00

====== Unsafe ======
Created 星期一 20 三月 2017

===== 让我们开始展示内存中Java类和对象结构 =====
	你可曾好奇过Java内存管理核心构件？你是否问过自己某些奇怪的问题，比如：
	
	* **一个类在内存中占据多少空间？**
	* **我的对象在内存中消耗了多少空间？**
	* **对象的属性在内存中是如何被布局的？**
	如果这些问题听起来很熟悉，那么你就想到了点子上。对于像我们这样的在RebelLabs的Java极客来说，这些难解的谜题已经在我们脑海中缠绕了很长时间：如果你对探究类检测器感兴趣，想知道如何布局让所有的类更容易地从内存中取到指定变量，或是想在系统运行时侵入内存中的这些字段。这就意味着你能切实改变内存中的数据甚至是代码！
	其它可能勾起你兴趣的知识点有，“堆外缓存”和“高性能序列化”的实现。这是一对构建在对象缓存结构上很好的实例，揭示了获取类和实例内存地址的方法，缓存中类和实例的布局以及关于对象成员变量布局的详细解释。我们希望尽可能简单地阐释这些内容，但是尽管如此这篇文章并不适合Java初学者，它要求具备对Java编程原理有一定的了解。
	
	注意：下面关于类和对象的布局所写的内容特指Java SE 7，所以不推荐使用者想当然地认为这些适用于过去或将来的Java版本。方便起见，我们在GitHub项目上发布了这篇文章的示例代码，


===== 在Java中最直接的内存操作方法是什么？ =====
	Java最初被设计为一种安全的受控环境。尽管如此，Java HotSpot还是包含了一个“后门”，提供了一些可以直接操控内存和线程的低层次操作。这个后门类——sun.misc.Unsafe——被JDK广泛用于自己的包中，如java.nio和java.util.concurrent。但是丝毫不建议在生产环境中使用这个后门。因为这个API十分不安全、不轻便、而且不稳定。这个不安全的类提供了一个观察HotSpot JVM内部结构并且可以对其进行修改。有时它可以被用来在不适用C++调试的情况下学习虚拟机内部结构，有时也可以被拿来做性能监控和开发工具。
	

===== 为何变得不安全 =====
	sun.misc.Unsafe这个类是如此地不安全，以至于JDK开发者增加了很多特殊限制来访问它。它的构造器是私有的，工厂方法getUnsafe()的调用器只能被Bootloader加载。如你在下面代码片段的第8行所见，这个家伙甚至没有被任何类加载器加载，所以它的类加载器是null。它会抛出SecurityException 异常来阻止侵入者。
	
	public final class Unsafe {
	   ...
	   private Unsafe() {}
	   private static final Unsafe theUnsafe = new Unsafe();
	   ...
	   public static Unsafe getUnsafe() {
		  Class cc = sun.reflect.Reflection.getCallerClass(2);
		  **if (cc.getClassLoader() != null)**
			  throw new SecurityException("Unsafe");
		  return theUnsafe;
	   }
	   ...
	}
	幸运的是这里有一个Unsafe的变量可以被用来取得Unsafe的实例。我们可以轻松地编写一个复制方法通过反射来实现，如下所示：
	
	public static Unsafe getUnsafe() {
	   try {
			   Field f = Unsafe.class.getDeclaredField("theUnsafe");
			   f.setAccessible(true);
			   return (Unsafe)f.get(null);
	   } catch (Exception e) { 
		   /* ... */
	   }
	}
	


===== Unsafe一些有用的特性 =====
	* 虚拟机“集约化”（VM intrinsification）：如用于无锁Hash表中的CAS（比较和交换）。再比如compareAndSwapInt这个方法用JNI调用，包含了对CAS有特殊引导的本地代码。在这里你能读到更多关于CAS的信息：http://en.wikipedia.org/wiki/Compare-and-swap。
	* 主机虚拟机（译注：主机虚拟机主要用来管理其他虚拟机。而虚拟平台我们看到只有guest VM）的sun.misc.Unsafe功能能够被用于未初始化的对象分配内存（用allocateInstance方法），然后将构造器调用解释为其他方法的调用。
	* 你可以从本地内存地址中追踪到这些数据。使用java.lang.Unsafe类获取内存地址是可能的。而且可以通过unsafe方法直接操作这些变量！
	* **使用allocateMemory方法，内存可以被分配到堆外**。例如当allocateDirect方法被调用时DirectByteBuffer构造器内部会使用allocateMemory。
	* arrayBaseOffset和arrayIndexScale方法可以被用于开发arraylets，一种用来将大数组分解为小对象、限制扫描的实时消耗或者在大对象上做更新和移动。

==== Unsafe 实例 ====
	在使用Unsafe之前，我们需要创建Unsafe对象的实例。这并不像Unsafe unsafe = new Unsafe()这么简单，因为Unsafe的构造器是私有的。它也有一个静态的getUnsafe()方法，但如果你直接调用Unsafe.getUnsafe()，你可能会得到SecurityException异常。只能从受信任的代码中使用这个方法。
	
	public static Unsafe getUnsafe() {
	
		Class cc = sun.reflect.Reflection.getCallerClass(2);
	
		if (cc.getClassLoader() != null)
	
			throw new SecurityException("Unsafe");
	
		return theUnsafe;
	
	}
	
	**这就是Java如何验证代码是否可信。它只检查我们的代码是否由主要的类加载器加载。**
	我们可以令我们的代码“受信任”。运行程序时，使用bootclasspath 选项，指定系统类路径加上你使用的一个Unsafe路径。
	java -Xbootclasspath:/usr/jdk1.7.0/jre/lib/rt.jar:. com.mishadoff.magic.UnsafeClient
	但这太难了。
	
	**Unsafe类包含一个私有的、名为theUnsafe的实例，我们可以通过Java反射窃取该变量。**
	Field f = Unsafe.class.getDeclaredField("theUnsafe");
	f.setAccessible(true);
	Unsafe unsafe = (Unsafe) f.get(null);
	注意：忽略你的IDE。比如：eclipse显示”Access restriction…”错误，但如果你运行代码，它将正常运行。如果这个错误提示令人烦恼，可以通过以下设置来避免：
	
==== Unsafe API ====
	sun.misc.Unsafe类包含105个方法。实际上，对各种实体操作有几组重要方法，其中的一些如下：

	**Info.仅返回一些低级的内存信息**
	
	addressSize
	pageSize
	
	**Objects.提供用于操作对象及其字段的方法**
	
	**allocateInstance**
	**objectFieldOffset**
	
	**Classes.提供用于操作类及其静态字段的方法**
	
	staticFieldOffset
	**defineClass**
	defineAnonymousClass
	ensureClassInitialized
	
	**Arrays.操作数组**
	
	**arrayBaseOffset**
	**arrayIndexScale**
	
	**Synchronization.低级的同步原语**
	
	monitorEnter
	tryMonitorEnter
	monitorExit
	**compareAndSwapInt**
	putOrderedInt
	
	**Memory.直接内存访问方法**
	
	**allocateMemory**
	**copyMemory**
	freeMemory
	**getAddress**
	**getInt**
	**putInt**


===== 有趣的用例 =====

==== 避免初始化 ====
	当你想要跳过对象初始化阶段，或绕过构造器的安全检查，或实例化一个没有任何公共构造器的类，allocateInstance方法是非常有用的。考虑以下类：
	class A {
		private long a; // not initialized value
	
		public A() {
			this.a = 1; // initialization
		}
	
		public long a() { return this.a; }
	}
	
	使用构造器、反射和unsafe初始化它，将得到不同的结果。
	
	A o1 = new A(); // constructor
	o1.a(); // prints 1
	
	A o2 = A.class.newInstance(); // reflection
	o2.a(); // prints 1
	
	A o3 = (A) unsafe.allocateInstance(A.class); // unsafe
	o3.a(); // prints 0


==== 内存崩溃（Memory corruption） ====

	这对于每个C程序员来说是常见的。顺便说一下，它是绕过安全的常用技术。
	
	考虑下那些用于检查“访问规则”的简单类：
	class Guard {
		   private int ACCESS_ALLOWED = 1;
	
		   public boolean giveAccess() {
				  return 42 == ACCESS_ALLOWED;
		   }
	}
	
	客户端代码是非常安全的，并且通过调用giveAccess()来检查访问规则。可惜，对于客户，它总是返回false。只有特权用户可以以某种方式改变ACCESS_ALLOWED常量的值并且得到访问（giveAccess()方法返回true，译者注）。
	
	实际上，这并不是真的。演示代码如下：
	Guard guard = new Guard();
	guard.giveAccess();   // false, no access
	
	// bypass
	Unsafe unsafe = getUnsafe();
	Field f = guard.getClass().getDeclaredField("ACCESS_ALLOWED");
	unsafe.putInt(guard, unsafe.objectFieldOffset(f), 42); // memory corruption
	
	guard.giveAccess(); // true, access granted
	
	现在所有的客户都拥有无限制的访问权限。
	
	实际上，反射可以实现相同的功能。但值得关注的是，我们可以修改任何对象，甚至没有这些对象的引用。
	
	例如，有一个guard对象，所在内存中的位置紧接着在当前guard对象之后。我们可以用以下代码来修改它的ACCESS_ALLOWED字段：
	unsafe.putInt(guard, 16 + unsafe.objectFieldOffset(f), 42); // memory corruption
	注意：我们不必持有这个对象的引用。16是Guard对象在32位架构上的大小。我们可以手工计算它，或者通过使用sizeOf方法（它的定义，如下节）。
	
	**sizeOf**
	使用objectFieldOffset方法可以实现C-风格（C-style）的sizeof方法。这个实现返回对象的自身内存大小
{{{code: lang="java" linenumbers="True"
public static long sizeOf(Object o) {
    Unsafe u = getUnsafe();
    HashSet<Field> fields = new HashSet<Field>();
    Class c = o.getClass();
    while (c != Object.class) {
        for (Field f : c.getDeclaredFields()) {
            if ((f.getModifiers() & Modifier.STATIC) == 0) {
                fields.add(f);
            }
        }
        c = c.getSuperclass();
    }

    // get offset
    long maxSize = 0;
    for (Field f : fields) {
        long offset = u.objectFieldOffset(f);
        if (offset > maxSize) {
            maxSize = offset;
        }
    }

    return ((maxSize/8) + 1) * 8;   // padding
}
}}}
	
	
	算法如下：通过所有非静态字段（包含父类的），获取每个字段的偏移量（offset），找到偏移最大值并填充字节数(padding)。我可能错过一些东西，但思路是明确的。
	
	如果我们仅读取对象的类结构大小值，sizeOf的实现可以更简单，这位于JVM 1.7 32 bit中的偏移量12。

	public static long sizeOf(Object object){
	
		return getUnsafe().getAddress(
	
			normalize(getUnsafe().getInt(object, 4L)) + 12L);
	
	}
	normalize是一个为了正确内存地址使用，将有符号的int类型强制转换成无符号的long类型的方法。

	private static long normalize(int value) {
	
		if(value >= 0) return value;
	
		return (~0L >>> 32) & value;
	
	}
	真棒，这个方法返回的结果与我们之前的sizeof方法一样。
	实际上，对于良好、安全、准确的sizeof方法，最好使用 java.lang.instrument包，但这需要在JVM中指定agent选项。

==== 浅拷贝（Shallow copy） ====
	为了实现计算对象自身内存大小，我们可以简单地添加拷贝对象方法。标准的解决方案是使用Cloneable修改你的代码，或者在你的对象中实现自定义的拷贝方法，但它不会是多用途的方法。
	浅拷贝：
	static Object shallowCopy(Object obj) {
		long size = sizeOf(obj);
		long start = toAddress(obj);
		long address = getUnsafe().allocateMemory(size);
		getUnsafe().copyMemory(start, address, size);
		return fromAddress(address);
	}
	toAddress和fromAddress将对象转换为其在内存中的地址，反之亦然。
	static long toAddress(Object obj) {
		Object[] array = new Object[] {obj};
		long baseOffset = getUnsafe().arrayBaseOffset(Object[].class);
		return normalize(getUnsafe().getInt(array, baseOffset));
	}
	
	static Object fromAddress(long address) {
		Object[] array = new Object[] {null};
		long baseOffset = getUnsafe().arrayBaseOffset(Object[].class);
		getUnsafe().putLong(array, baseOffset, address);
		return array[0];
	}
	
	这个拷贝方法可以用来拷贝任何类型的对象，动态计算它的大小。注意，在拷贝后，你需要将对象转换成特定的类型。
	
==== 隐藏密码（Hide Password） ====
	在Unsafe中，一个更有趣的直接内存访问的用法是，从内存中删除不必要的对象。
	
	**检索用户密码的大多数API的签名为byte[]或char[]，为什么是数组呢？**
	
	**这完全是出于安全的考虑，因为我们可以删除不需要的数组元素。**如果将用户密码检索成字符串，这可以像一个对象一样在内存中保存，而删除该对象只需执行解除引用的操作。但是，这个对象仍然在内存中，由GC决定的时间来执行清除。
	
	创建具有相同大小、假的String对象，来取代在内存中原来的String对象的技巧：
	
	String password = new String("l00k@myHor$e");
	String fake = new String(password.replaceAll(".", "?"));
	System.out.println(password); // l00k@myHor$e
	System.out.println(fake); // ????????????
	
	getUnsafe().copyMemory(
			  fake, 0L, null, toAddress(password), sizeOf(password));
	
	System.out.println(password); // ????????????
	System.out.println(fake); // ????????????
	
	感觉很安全。
	
	修改：这并不安全。为了真正的安全，我们需要通过反射删除后台char数组：
	
	Field stringValue = String.class.getDeclaredField("value");
	stringValue.setAccessible(true);
	char[] mem = (char[]) stringValue.get(password);
	for (int i=0; i < mem.length; i++) {
	  mem[i] = '?';
	}
	
==== 多继承（Multiple Inheritance） ====
	
	Java中没有多继承。
	
	这是对的，除非我们可以将任意类型转换成我们想要的其他类型。
	long intClassAddress = normalize(getUnsafe().getInt(new Integer(0), 4L));
	long strClassAddress = normalize(getUnsafe().getInt("", 4L));
	getUnsafe().putAddress(intClassAddress + 36, strClassAddress);
	这个代码片段将String类型添加到Integer超类中，因此我们可以强制转换，且没有运行时异常。

	(String) (Object) (new Integer(666))
	有一个问题，我们必须预先强制转换对象，以欺骗编译器。
	
==== 动态类（Dynamic classes） ====
	我们可以在运行时创建一个类，比如从已编译的.class文件中。将类内容读取为字节数组，并正确地传递给defineClass方法。
	byte[] classContents = getClassContent();
	Class c = getUnsafe().defineClass(
				  null, classContents, 0, classContents.length);
		c.getMethod("a").invoke(c.newInstance(), null); // 1
	
	从定义文件（class文件）中读取（代码）如下：
	private static byte[] getClassContent() throws Exception {
		File f = new File("/home/mishadoff/tmp/A.class");
		FileInputStream input = new FileInputStream(f);
		byte[] content = new byte[(int)f.length()];
		input.read(content);
		input.close();
		return content;
	}
	当你必须动态创建类，而现有代码中有一些代理， 这是很有用的。

==== 抛出异常（Throw an Exception） ====
	不喜欢受检异常？没问题。
	getUnsafe().throwException(new IOException());
	该方法抛出受检异常，但你的代码不必捕捉或重新抛出它，正如运行时异常一样。
	
==== 快速序列化（Fast Serialization） ====
	大家都知道，标准Java的Serializable的序列化能力是非常慢的。它同时要求类必须有一个公共的、无参数的构造器。
	
	Externalizable比较好，但它需要定义类序列化的模式。
	
	流行的高性能库，比如kryo具有依赖性，这对于低内存要求来说是不可接受的。
	
	unsafe类可以很容易实现完整的序列化周期。
	
	序列化：
	
	* 使用反射构建模式对象，类只可做一次。
	* 使用Unsafe方法，如getLong、getInt、getObject等来检索实际字段值。
	* 添加类标识，以便有能力恢复该对象
	* 将它们写入文件或任意输出
	* 你也可以添加压缩（步骤）以节省空间。
	
	反序列化：
	
	* 创建已序列化对象实例，使用allocateInstance协助（即可），因为不需要任何构造器。
	* 构建模式，与序列化的步骤1相同。
	* 从文件或任意输入中读取所有字段。
	* 使用Unsafe方法，如putLong、putInt、putObject等来填充该对象。
	实际上，在正确的实现过程中还有更多的细节，但思路是明确的。
	
	这个序列化将非常快。

==== 大数组（Big Arrays） ====
	正如你所知，Java数组大小的最大值为Integer.MAX_VALUE。使用直接内存分配，我们创建的数组大小受限于堆大小。
	
	SuperArray的实现：
{{{code: lang="java" linenumbers="True"
class SuperArray {
    private final static int BYTE = 1;

    private long size;
    private long address;

    public SuperArray(long size) {
        this.size = size;
        address = getUnsafe().allocateMemory(size * BYTE);
    }

    public void set(long i, byte value) {
        getUnsafe().putByte(address + i * BYTE, value);
    }

    public int get(long idx) {
        return getUnsafe().getByte(address + idx * BYTE);
    }

    public long size() {
        return size;
    }
}
}}}
	
	简单用法：
	long SUPER_SIZE = (long)Integer.MAX_VALUE * 2;
	SuperArray array = new SuperArray(SUPER_SIZE);
	System.out.println("Array size:" + array.size()); // 4294967294
	for (int i = 0; i < 100; i++) {
		array.set((long)Integer.MAX_VALUE + i, (byte)3);
		sum += array.get((long)Integer.MAX_VALUE + i);
	}
	System.out.println("Sum of 100 elements:" + sum);  // 300
	实际上，**这是堆外内存（off-heap memory）技术**，在java.nio包中部分可用。
	
	**这种方式的内存分配不在堆上，且不受GC管理**，所以必须小心Unsafe.freeMemory()的使用。它也不执行任何边界检查，所以任何非法访问可能会导致JVM崩溃。
	
	这可用于数学计算，代码可操作大数组的数据。此外，这可引起实时程序员的兴趣，可打破GC在大数组上延迟的限制。

==== 并发（Concurrency） ====
	几句关于Unsafe的并发性。compareAndSwap方法是原子的，并且可用来实现高性能的、无锁的数据结构。
	
	比如，考虑问题：在使用大量线程的共享对象上增长值。
	
	首先，我们定义简单的Counter接口：
	interface Counter {
		void increment();
		long getCounter();
	}
	
	然后，我们定义使用Counter的工作线程CounterClient：
	class CounterClient implements Runnable {
		private Counter c;
		private int num;
	
		public CounterClient(Counter c, int num) {
			this.c = c;
			this.num = num;
		}
	
		@Override
		public void run() {
			for (int i = 0; i < num; i++) {
				c.increment();
			}
		}
	}
	
	测试代码
{{{code: lang="java" linenumbers="True"
int NUM_OF_THREADS = 1000;
int NUM_OF_INCREMENTS = 100000;
ExecutorService service = Executors.newFixedThreadPool(NUM_OF_THREADS);
Counter counter = ... // creating instance of specific counter
long before = System.currentTimeMillis();
for (int i = 0; i < NUM_OF_THREADS; i++) {
    service.submit(new CounterClient(counter, NUM_OF_INCREMENTS));
}
service.shutdown();
service.awaitTermination(1, TimeUnit.MINUTES);
long after = System.currentTimeMillis();
System.out.println("Counter result: " + c.getCounter());
System.out.println("Time passed in ms:" + (after - before));
}}}
	
	第一个无锁版本的计数器：
	class StupidCounter implements Counter {
		private long counter = 0;
	
		@Override
		public void increment() {
			counter++;
		}
	
		@Override
		public long getCounter() {
			return counter;
		}
	}
	
	输出：
	
	Counter result: 99542945
	
	Time passed in ms: 679
	
	运行快，但没有线程管理，结果是不准确的。第二次尝试，添加上最简单的java式同步：
	
	class SyncCounter implements Counter {
		private long counter = 0;
	
		@Override
		public synchronized void increment() {
			counter++;
		}
	
		@Override
		public long getCounter() {
			return counter;
		}
	}
	输出：
	
	Counter result: 100000000
	
	Time passed in ms: 10136
	
	激进的同步有效，但耗时长。试试ReentrantReadWriteLock：
	class LockCounter implements Counter {
		private long counter = 0;
		private WriteLock lock = new ReentrantReadWriteLock().writeLock();
	
		@Override
		public void increment() {
			lock.lock();
			counter++;
			lock.unlock();
		}
	
		@Override
		public long getCounter() {
			return counter;
		}
	}
	输出：
	
	Counter result: 100000000
	
	Time passed in ms: 8065
	仍然正确，耗时较短。atomics的运行效果如何？
	class AtomicCounter implements Counter {
		AtomicLong counter = new AtomicLong(0);
	
		@Override
		public void increment() {
			counter.incrementAndGet();
		}
	
		@Override
		public long getCounter() {
			return counter.get();
		}
	}
	
	输出：
	Counter result: 100000000
	Time passed in ms: 6552
	AtomicCounter的运行结果更好。最后，试试Unsafe原始的compareAndSwapLong，看看它是否真的只有特权才能使用它？
{{{code: lang="java" linenumbers="True"
class CASCounter implements Counter {
    private volatile long counter = 0;
    private Unsafe unsafe;
    private long offset;

    public CASCounter() throws Exception {
        unsafe = getUnsafe();
        offset = unsafe.objectFieldOffset(CASCounter.class.getDeclaredField("counter"));
    }

    @Override
    public void increment() {
        long before = counter;
        while (!unsafe.compareAndSwapLong(this, offset, before, before + 1)) {
            before = counter;
        }
    }

    @Override
    public long getCounter() {
        return counter;
    }
}
}}}
	
	输出：
	Counter result: 100000000
	Time passed in ms: 6454
	看起来似乎等价于atomics。atomics使用Unsafe？（是的）
	
	实际上，这个例子很简单，但它展示了Unsafe的一些能力。
	
	如我所说，CAS原语可以用来实现无锁的数据结构。背后的原理很简单：
	
	有一些状态
	创建它的副本
	修改它
	执行CAS
	如果失败，重复尝试
	实际上，现实中比你现象的更难。存在着许多问题，如ABA问题、指令重排序等。
	










==== 普通对象指针和压缩普通对象指针 ====
	堆中的Java对象使用普通对象指针（OOP）来表示的。OOP是指向Java堆内部某一内存地址的管理指针，在JVM处理器的虚地址空间中是一块单独的连续地址区域。
	
	OOP通常和机器指针大小相同，在一个LP64的系统中就是64比特。在一个ILP32系统中，堆最大尺寸比40亿字节稍微少一点，足以满足大多数应用了。
	
	译注：32位环境涉及”ILP32″数据模型，是因为C数据类型为32位的int、long、指针。而64位环境使用不同的数据模型，此时的long和指针已为64位，故称作”LP64″数据模型。
	
	Java堆中的管理指针指向8字节对齐对象
	在大多数情况下，压缩普通对象指针代表了JVM中从64比特的堆基地址偏移32比特的对象管理指针。因为它们都是对象偏移而不是字节偏移，所以可以用于寻址40亿对象或者320亿字节的堆大小。使用时，必须乘以8并且加上Java堆的基地址去定位对象的位置。使用压缩普通对象指针的对象大小和ILP32系统差不多。
	
	在Java v6u23及以后的版本中，支持并且默认启用压缩普通对象指针。在Java v7中，当没有指定”-Xmx”时，64比特
	JVM处理器默认使用压缩普通对象指针；指定”-Xmx”时小于320亿字节。在6u23版本之前的JDK 6，在Java命令中使用”-XX:+UseCompressedOops”标志启用这一特性
	
	在我们的示例中，通过“-XX:-UseCompressedOops” 关闭了压缩普通对象指针功能，所以64bit的指针大小就是8字节。
	

==== 关于示例类的一些事 ====
	在这篇文章中，我们将使用一个示例类（SampleClass）展示对象地址恢复、列出字段布局等。这是一个简单类，包含了三个基本数据类型并且继承了SampleBaseClass，用来展示继承的内存布局。示例类的定义如下，示例代码可以在GitHub上找到：
	
	public final class SampleClass extends SampleBaseClass {
	 
		private final static byte b = 100;
	 
		private int i = 5;
		private long l = 10;
	 
		public SampleClass() {
	 
		}
	 
		public SampleClass(int i, long l) {
			this.i = i;
			this.l = l;
		}
	 
		public int getI() {
			return i;
		}
	 
		public void setI(int i) {
			this.i = i;
		}
	 
		public long getL() {
			return l;
		}
	 
		public void setL(long l) {
			this.l = l;
		}
	 
		public static byte getB() {
			return b;
		}
	}
	
	
	public class SampleBaseClass {
	 
		protected short s = 20;
	}
	
要得到Java类的内存地址没有简便方法。为了得到地址，必须使用一些技巧并且做一些牺牲！本文会介绍两种获得Java类内存地址的办法。

=== 方法一 ===
	在JVM中，每个对象都有一个指向类的指针。但是只指向具体类，不支持接口或抽象类。如果我们得到一个对象的内存地址，就可以很容易地找到类的地址。这种方法对于那些可以创建实例的类来说非常有用。但是接口或抽象类不能使用这种方法。
	
	For 32 bit JVM:
		_mark	: 4 byte constant
		_klass	: 4 byte pointer to class 
	
	For 64 bit JVM:
		_mark	: 8 byte constant
		_klass	: 8 byte pointer to class
	
	For 64 bit JVM with compressed-oops:
		_mark	: 8 byte constant
		_klass	: 4 byte pointer to class
	
	内存中对象的第二个字段（对32位JVM偏移是4，64位JVM偏移是8）指向了内存中的类定义。你可以使用“sun.misc.Unsafe” 类得到此偏移的内存值。这里用到的是在上一篇中提到的SampleClass。
	For 32 bit JVM:
		SampleClass sampleClassObject = new SampleClass();
		int addressOfSampleClass = unsafe.getInt(sampleClassObject, 4L);
	
	For 64 bit JVM:
		SampleClass sampleClassObject = new SampleClass();
		long addressOfSampleClass = unsafe.getLong(sampleClassObject, 8L);
	
	For 64 bit JVM with compressed-oops:
		SampleClass sampleClassObject = new SampleClass();
		long addressOfSampleClass = unsafe.getInt(sampleClassObject, 8L);
	

=== 方法2 ===
	使用这种方法，可以得到任何类的内存地址（包括接口、注解、抽象类和枚举）。Java7中类定义的内存地址结构如下：32位JVM的地址偏移从第4到80字节，64位JVM的地址偏移从8字节到160字节，压缩普通对象指针的地址偏移从第4到84字节。
	
	没有预先定义好的偏移，但是在类文件解析器中作为“隐藏”字段给出了注释（这里实际上有3个字段：class, arrayClass, resolvedConstructor）。因为在java.lang.Class中有18个非静态引用字段，他们只是恰好表示了这段偏移。
	
	更多信息可以参见ClassFileParser::java_lang_Class_fix_pre() 和JavaClasses::check_offsets()。
		获取内存地址的示例代码如下：
		For 32 bit JVM:
			int addressOfSampleClass = unsafe.getInt(SampleClass.class, 80L);
		
		For 64 bit JVM:
			long addressOfSampleClass = unsafe.getLong(SampleClass.class, 160L);
		
		For 64 bit JVM with compressed-oops:
			long addressOfSampleClass = unsafe.getInt(SampleClass.class, 84L);


==== 怎样才能获得对象内存地址？ ====
	获取对象内存地址要比获取类内存地址更加需要技巧。我们需要使用长度和 java.lang.Object 类型的辅助数组（长度为1）获得对象的内存地址。
	
	下面是获取对象内存地址的详细步骤：
	
	1、将目标对象设为辅助数组的第一个元素（也是唯一的元素）。由于这是一个复杂类型元素（不是基本数据类型），它的地址存储在数组的第一个元素。
	
	2、然后，获取辅助数组的基本偏移量。**数组的基本偏移量是指数组对象的起始地址与数组第一个元素之间的偏移量。**
	
	3、确定JVM的地址空间：
	
	如果是32位JVM，可以通过 sun.misc.Unsafe 类得到数组对象的内存地址（address_of_array）与数组基本偏移量（base_offset_of_array）相加的整型结果。这个4字节整型数值就是目标对象的内存地址。
	如果是64位JVM，可以通过 sun.misc.Unsafe 类得到数组对象的内存地址（address_of_array）与数组基本偏移量（base_offset_of_array）相加的长整型值结果。这个8字节长整型数值就是目标对象的内存地址。
	
	32位JVM
	Object helperArray[]    = new Object[1];
	helperArray[0]      = targetObject;
	long baseOffset     = unsafe.arrayBaseOffset(Object[].class);
	int addressOfObject = unsafe.getInt(helperArray, baseOffset);
	
	64位JVM
	Object helperArray[]    = new Object[1];
	helperArray[0]      = targetObject;
	long baseOffset     = unsafe.arrayBaseOffset(Object[].class);
	long addressOfObject    = unsafe.getLong(helperArray, baseOffset);
	
	可以认为这段代码中的 targetObject 是上文中 SampleClass 的某个实例。但请记住，这段代码适用于任何类的任何实例。
	

==== 类的内存布局 ====
	32位JVM
	
	[header                ] 4  byte
	[klass pointer         ] 4  byte (pointer)
	[C++ vtbl ptr          ] 4  byte (pointer)
	[layout_helper         ] 4  byte
	[super check offset    ] 4  byte 
	[name                  ] 4  byte (pointer)
	[secondary super cache ] 4  byte (pointer)
	[secondary supers      ] 4  byte (pointer)
	[primary supers        ] 32 byte (8 length array of pointer)
	[java mirror           ] 4  byte (pointer)
	[super                 ] 4  byte (pointer)
	[first subklass        ] 4  byte (pointer)
	[next sibling          ] 4  byte (pointer)
	[modifier flags        ] 4  byte
	 4  byte
	
	
	64位JVM
	
	[header                ] 8  byte
	[klass pointer         ] 8  byte (4 byte for compressed-oops)
	[C++ vtbl ptr          ] 8  byte (4 byte for compressed-oops)
	[layout_helper         ] 4  byte
	[super check offset    ] 4  byte 
	[name                  ] 8  byte (4 byte for compressed-oops)
	[secondary super cache ] 8  byte (4 byte for compressed-oops)
	[secondary supers      ] 8  byte (4 byte for compressed-oops)
	[primary supers        ] 64 byte (32 byte for compressed-oops)
										 {8 length array of pointer}
	[java mirror           ] 8  byte (4 byte for compressed-oops)
	[super                ] 8  byte (4 byte for compressed-oops)
	[first subklass         ] 8  byte (4 byte for compressed-oops)
	[next sibling          ] 8  byte (4 byte for compressed-oops)
	[modifier flags        ] 4  byte
	 4  byte
	
	下图展示了 SampleClass 在32位JVM中的内存布局，列出了自起始地址起的前128个字节：
	{{./pasted_image.png}}
	{{./pasted_image002.png}}
	
	这是 SampleBaseClass 在32位JVM中的内存布局，列出了自起始地址起的前128个字节：
	{{./pasted_image003.png}}
	
	我们只对重要的字段进行说明，数字的颜色对应着相应字段的颜色。
	
	**header** 是一个常量：0×00000001。
	
	**klass pointer** 指向 java.lang.Class 类在内存中的定义（即 java.lang.Class 类的内存地址，这两个类的klass pointer字段都指向0x38970v8a8），表明这是一个类的内存结构。
	
	**C++ vtbl ptr** 指向其对应类的虚函数表。虚函数表用于实现运行时虚函数调用的多态性。
	
	**layout helper** 用于记录该实例的浅尺寸（Shallow size）。浅尺寸是根据JVM的字段对齐机制计算出来的。在我们的环境中，对象按8字节对齐。
	
	**super** 指向其父类的定义，在我们的演示代码中，SampleBaseClass 是 SampleClass 的父类。在 SampleClass 类的内存布局中，可以看到SampleBaseClass 的内存地址为0x34104b70。而在 SampleBaseClass 类的内存布局中， 父类的内存地址为0×38970000，这是  java.lang.Object 类的地址。因为在Java中，每一个类都是 Object 类的子类。
	
	**modifier flags** 即类的修饰符标志位。在Java中类的修饰符包括：public、protected、private、abstract、static、final以及strictfp。modifier flags 字段的值是对目标类的所有修饰符进行按位或运算得到的。在我们的示例代码中，SampleClass 类的修饰符有 public 和 final 。因此它的 modifier flags 字段的值为“0×00000001 | 0×00000010 =  0×00000011 ”。而 SampleBaseClass 类的修饰符只有 public，所以它的modifier flags 字段的值为0×00000001 。各修饰符的对应取值如下所示：
	

==== 字段布局和对齐 ====
	和C/C++不同，Java没有 sizeOf 运算符计算基本数据类型类型或对象所占用的内存空间，sizeOf 运算符在IO操作和内存管理中非常实用。事实上，由于基本数据类型的大小在语言规范中预先定义，Java中也不会出现指针拷贝内存和指针运算（因为没有指针）。因此，sizeOf 运算符并没有存在的必要。
	
	有两种方法能够确定一个类及其属性共占用了多少内存空间。分别是浅尺寸（shallow size）和深尺寸（deep size）。浅尺寸就是对象本身各个字段所占用内存的大小，不包含该类中所引用的其他对象；于是引入了深尺寸概念，深尺寸在浅尺寸的基础上增加了该类引用的其他对象的浅尺寸。
	
	Sun Java虚拟机规定：除数组外的所有对象都包含一个长度为双字（two-word，一个字由**两个字节**组成）的 header，一个长度为单字（one-word）flags，以及一个指向对应类引用的单字（one-word）的字段。当我们用 new Object() 方法创建一个对象时，堆上就会为其分配**8个字节的内存空间**。
	
	对于一个继承了 Object 的类来说，情况会变得复杂而有趣。在这8个字节后面，**类的各个属性在堆内存上会按照一定的规则对齐，但并不按照他们的声明顺序进行对齐。**
	
	基本数据类型按照下列顺序进行对齐：
	
	* double、long
	* int、float
	* short、char
	* boolean、byte
	
	接下来，该类中所引用其他类的对象也会在堆上进行对齐。JVM会把对象的大小调整为8字节的倍数
	
	请看下面的示例：
	
	class BooleanClass {
	byte a;
	}
	这里会自动填充7个字节，整个对象的大小被扩大到16个字节。
	
	Headers (include flags and ref to class) : 8 bytes
	value of byte : 1 byte
	padding : 7 bytes
	

==== 关于OOP的更多信息 ====
	有关OOP的一些基本信息已经在 OOP 和 压缩OOP 章节介绍过了。我们假定你已经对JVM中 OOP 相关的术语有一定的了解了，下面就让我们对它作进一步的了解。
	
	OOP由两个机器字长度的字段组成（32位JVM上机器字长为4字节，64位JVM上机器字长为8字节），这两个字段分别是 Mark 和 Klass。这两个字段出现在该实例的所有成员字段之前（译注：这两个字段应该就是对应上面字段的布局和对齐章节中 headers 所占用的8个字节）。但对于数组对象来说，在这两个字段之前会有一个额外的字段用于记录数组的长度。Mark 字段用于垃圾回收（在mark-and-sweep回收算法中使用），Klass 字段用于指向其对应类的元数据。所有的基本数据类型字段和引用字段都排在OOP（Mark 和 Klass 字段）的后面，包括引用其他对象的字段，甚至是引用OOP的字段
	

==== MarkOOPs ====

	Mark字段指向一个维护着OOP相关管理信息的数据结构。在32位JVM中，mark字段的数据结构为
	
	* 哈希值（25 bits）：记录着该对象的 HashCode() 方法的返回值。
	* 年龄（4 bits）：对象的年龄（即这个对象所经历过的垃圾回收的次数）。
	* 偏向锁（1 bit）+ 锁（2 bits）：用于表示该对象的同步状态。

	Java 5引入了一种全新的对象同步方式，叫做偏向锁（Java 6中默认使用偏向锁 Biased-Lock）。经过观察发现，在多数情况下对象在运行时往往只被一个线程锁住，因此引入了偏向锁的概念。处于偏向锁状态中的对象会优先朝向第一个锁住它的线程，这个线程也会获得到更好的锁性能。Mark字段中会记录获取到该对象偏向锁的线程：
	
	* Java线程指针：23 bits
	* 历元时间戳（Epoch）：2 bits
	* 年龄：4 bits
	* 偏向锁状态：1 bit
	* 锁状态：2 bits

	如果另一个线程尝试锁定该对象，偏向锁就会失效（无法重新获取）。这样，所有的线程都必须通过显式调用lock、unlock方法来锁定和解锁对象。
	
	下面是对象可能出现的状态：
	* 未锁定状态（Unlocked）
	* 偏向锁状态（Biased）
	* 轻量级锁定（Lightweight Locked）
	* 重量级锁定（Heavyweight Locked）
	* 标记状态（Marked，仅会在垃圾回收期间出现）


==== KlassOOPs ====
	Klass 字段是一个指向对应类的元数据（包括字段的定义以及类似C++的虚函数表）的指针。每一个实例都携带一份类的元数据是一种非常低效的方式，KlassOOPs能让所有对象共享同一份元数据从而减少不必要的开销。需要注意的是 KlassOOP 和类加载器所产生的 Class object（java.lang.class 类型的对象）并不相同。下面是两者之间的区别：
	
	Class objects 只是普通的Java对象。Class objects和其他的Java对象一样可以用OOP（InstanceOOPs）表示。其表现行为也与其他的Java对象相同，还可以存放到Java变量里。
	KlassOOPs 是类的元数据在JVM中的表现形式，例如类的虚函数表就存放在 KlassOOPs 中。由于 KlassOOPs 生存在堆的永久区里（Permgen space），因此在Java代码中无法直接获得 KlassOOPs 的引用。你也可以简单地认为 KlassOOP 是对应类的 Class object 在虚拟机级别上的镜像。
	


	32位JVM
	
		[mark]         ] 8  byte
		[klass pointer ] 8  byte (pointer)
		[fields        ] values of all fields including fields from super classe









































































