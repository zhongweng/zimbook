Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-28T16:00:47+08:00

====== ThreadPoolExecutor ======
Created 星期二 28 三月 2017

	ThreadPoolExecutor是线程池类。对于线程池，可以通俗的将它理解为"存放一定数量线程的一个线程集合。线程池允许若个线程同时允许，允许同时运行的线程数量就是线程池的容量；当添加的到线程池中的线程超过它的容量时，会有一部分线程阻塞等待。线程池会通过相应的调度策略和拒绝策略，对添加到线程池中的线程进行管理。"
	
	{{./pasted_image.png}}
	
	

==== 1. workers ====
	workers是HashSet<Work>类型，即它是一个Worker集合。而一个Worker对应一个线程，也就是说线程池通过workers包含了"一个线程集合"。当Worker对应的线程池启动时，它会执行线程池中的任务；当执行完一个任务后，它会从线程池的阻塞队列中取出一个阻塞的任务来继续运行。
	wokers的作用是，线程池通过它实现了"允许多个线程同时运行"。


==== 2. workQueue ====
	workQueue是BlockingQueue类型，即它是一个**阻塞队列**。当线程池中的线程数超过它的容量的时候，线程会进入阻塞队列进行阻塞等待。
	通过workQueue，线程池实现了阻塞功能。


==== 3. mainLock ====
	mainLock是互斥锁，通过mainLock实现了对线程池的互斥访问。


==== 4. corePoolSize和maximumPoolSize ====
	corePoolSize是"核心池大小"，maximumPoolSize是"最大池大小"。它们的作用是调整"线程池中实际运行的线程的数量"。
	例如，当新任务提交给线程池时(通过execute方法)。
		  **-- 如果此时，线程池中运行的线程数量< corePoolSize，则创建新线程来处理请求。**
**          -- 如果此时，线程池中运行的线程数量> corePoolSize，但是却< maximumPoolSize；则仅当阻塞队列满时才创建新线程。**
		  如果设置的 corePoolSize 和 maximumPoolSize 相同，则创建了固定大小的线程池。如果将 maximumPoolSize 设置为基本的无界值（如 Integer.MAX_VALUE），则允许池适应任意数量的并发任务。在大多数情况下，核心池大小和最大池大小的值是在创建线程池设置的；但是，也可以使用 setCorePoolSize(int) 和 setMaximumPoolSize(int) 进行动态更改。


==== 5. poolSize ====
	poolSize是当前线程池的实际大小，即线程池中任务的数量。


==== 6. allowCoreThreadTimeOut和keepAliveTime ====
	allowCoreThreadTimeOut表示是否允许"线程在空闲状态时，仍然能够存活"；而keepAliveTime是当线程池处于空闲状态的时候，超过keepAliveTime时间之后，空闲的线程会被终止。


==== 7. threadFactory ====
	threadFactory是ThreadFactory对象。它是一个线程工厂类，"线程池通过ThreadFactory创建线程"。


==== 8. handler ====
	handler是RejectedExecutionHandler类型。它是"线程池拒绝策略"的句柄，也就是说"当某任务添加到线程池中，而线程池拒绝该任务时，线程池会通过handler进行相应的处理"。

 

综上所说，线程池通过workers来管理"线程集合"，每个线程在启动后，会执行线程池中的任务；当一个任务执行完后，它会从线程池的阻塞队列中取出任务来继续运行。阻塞队列是管理线程池任务的队列，当添加到线程池中的任务超过线程池的容量时，该任务就会进入阻塞队列进行等待。

==== 线程池调度 ====
	{{./pasted_image001.png}} {{./pasted_image004.png}}
	
	

===== 创建“线程池” =====

==== ThreadPoolExecutor ====

	public static ExecutorService newFixedThreadPool(int nThreads) {
			return new ThreadPoolExecutor(nThreads, nThreads,
										  0L, TimeUnit.MILLISECONDS,
										  new LinkedBlockingQueue<Runnable>());
		}
	
	ThreadPoolExecutor()在ThreadPoolExecutor.java中定义，源码如下：

	public ThreadPoolExecutor(int corePoolSize,
							  int maximumPoolSize,
							  long keepAliveTime,
							  TimeUnit unit,
							  BlockingQueue<Runnable> workQueue) {
		this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,
			 Executors.defaultThreadFactory(), defaultHandler);
	}
	
	
	public ThreadPoolExecutor(int corePoolSize,
							  int maximumPoolSize,
							  long keepAliveTime,
							  TimeUnit unit,
							  BlockingQueue<Runnable> workQueue,
							  ThreadFactory threadFactory,
							  RejectedExecutionHandler handler) {
		if (corePoolSize < 0 ||
			maximumPoolSize <= 0 ||
			maximumPoolSize < corePoolSize ||
			keepAliveTime < 0)
			throw new IllegalArgumentException();
		if (workQueue == null || threadFactory == null || handler == null)
			throw new NullPointerException();
		// 核心池大小
		this.corePoolSize = corePoolSize;
		// 最大池大小
		this.maximumPoolSize = maximumPoolSize;
		// 线程池的等待队列
		this.workQueue = workQueue;
		this.keepAliveTime = unit.toNanos(keepAliveTime);
		// 线程工厂对象
		this.threadFactory = threadFactory;
		// 拒绝策略的句柄
		this.handler = handler;
	}
	

==== ThreadFactory: ====
	public static ThreadFactory defaultThreadFactory() {
		return new DefaultThreadFactory();
	}
	
	static class DefaultThreadFactory implements ThreadFactory {
		private static final AtomicInteger poolNumber = new AtomicInteger(1);
		private final ThreadGroup group;
		private final AtomicInteger threadNumber = new AtomicInteger(1);
		private final String namePrefix;
	
		DefaultThreadFactory() {
			SecurityManager s = System.getSecurityManager();
			group = (s != null) ? s.getThreadGroup() :
								  Thread.currentThread().getThreadGroup();
			namePrefix = "pool-" +
						  poolNumber.getAndIncrement() +
						 "-thread-";
		}
	
		// 提供创建线程的API。
		public Thread newThread(Runnable r) {
			// 线程对应的任务是Runnable对象r
			Thread t = new Thread(group, r,
								  namePrefix + threadNumber.getAndIncrement(),
								  0);
			// 设为“非守护线程”
			if (t.isDaemon())
				t.setDaemon(false);
			// 将优先级设为“Thread.NORM_PRIORITY”
			if (t.getPriority() != Thread.NORM_PRIORITY)
				t.setPriority(Thread.NORM_PRIORITY);
			return t;
		}
	}


===== 添加任务到“线程池” =====

==== execute() ====
{{{code: lang="java" linenumbers="True"
public void execute(Runnable command) {
    // 如果任务为null，则抛出异常。
    if (command == null)
        throw new NullPointerException();
    // 获取ctl对应的int值。该int值保存了"线程池中任务的数量"和"线程池状态"信息
    int c = ctl.get();
    // 当线程池中的任务数量 < "核心池大小"时，即线程池中少于corePoolSize个任务。
    // 则通过addWorker(command, true)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。
    if (workerCountOf(c) < corePoolSize) {
        if (addWorker(command, true))
            return;
        c = ctl.get();
    }
    // 当线程池中的任务数量 >= "核心池大小"时，
    // 而且，"线程池处于允许状态"时，则尝试将任务添加到阻塞队列中。
    if (isRunning(c) && workQueue.offer(command)) {
        // 再次确认“线程池状态”，若线程池异常终止了，则删除任务；然后通过reject()执行相应的拒绝策略的内容。
        int recheck = ctl.get();
        if (! isRunning(recheck) && remove(command))
            reject(command);
        // 否则，如果"线程池中任务数量"为0，则通过addWorker(null, false)尝试新建一个线程，新建线程对应的任务为null。
        else if (workerCountOf(recheck) == 0)
            addWorker(null, false);
    }
    // 通过addWorker(command, false)新建一个线程，并将任务(command)添加到该线程中；然后，启动该线程从而执行任务。
    // 如果addWorker(command, false)执行失败，则通过reject()执行相应的拒绝策略的内容。
    else if (!addWorker(command, false))
        reject(command);
}
}}}
	
	说明：execute()的作用是将任务添加到线程池中执行。它会分为3种情况进行处理：
			情况1 -- 如果"线程池中任务数量" < "核心池大小"时，即线程池中少于corePoolSize个任务；此时就新建一个线程，并将该任务添加到线程中进行执行。
			情况2 -- 如果"线程池中任务数量" >= "核心池大小"，并且"线程池是允许状态"；此时，则将任务添加到阻塞队列中阻塞等待。在该情况下，会再次确认"线程池的状态"，如果"第2次读到的线程池状态"和"第1次读到的线程池状态"不同，则从阻塞队列中删除该任务。
			情况3 -- 非以上两种情况。在这种情况下，尝试新建一个线程，并将该任务添加到线程中进行执行。如果执行失败，则通过reject()拒绝该任务。
	

==== addWorker() ====
{{{code: lang="java" linenumbers="True"
private boolean addWorker(Runnable firstTask, boolean core) {
    retry:
    // 更新"线程池状态和计数"标记，即更新ctl。
    for (;;) {
        // 获取ctl对应的int值。该int值保存了"线程池中任务的数量"和"线程池状态"信息
        int c = ctl.get();
        // 获取线程池状态。
        int rs = runStateOf(c);

        // 有效性检查
        if (rs >= SHUTDOWN &&
            ! (rs == SHUTDOWN &&
               firstTask == null &&
               ! workQueue.isEmpty()))
            return false;

        for (;;) {
            // 获取线程池中任务的数量。
            int wc = workerCountOf(c);
            // 如果"线程池中任务的数量"超过限制，则返回false。
            if (wc >= CAPACITY ||
                wc >= (core ? corePoolSize : maximumPoolSize))
                return false;
            // 通过CAS函数将c的值+1。操作失败的话，则退出循环。
            if (compareAndIncrementWorkerCount(c))
                break retry;
            c = ctl.get();  // Re-read ctl
            // 检查"线程池状态"，如果与之前的状态不同，则从retry重新开始。
            if (runStateOf(c) != rs)
                continue retry;
            // else CAS failed due to workerCount change; retry inner loop
        }
    }

    boolean workerStarted = false;
    boolean workerAdded = false;
    Worker w = null;
    // 添加任务到线程池，并启动任务所在的线程。
    try {
        final ReentrantLock mainLock = this.mainLock;
        // 新建Worker，并且指定firstTask为Worker的第一个任务。
        w = new Worker(firstTask);
        // 获取Worker对应的线程。
        final Thread t = w.thread;
        if (t != null) {
            // 获取锁
            mainLock.lock();
            try {
                int c = ctl.get();
                int rs = runStateOf(c);

                // 再次确认"线程池状态"
                if (rs < SHUTDOWN ||
                    (rs == SHUTDOWN && firstTask == null)) {
                    if (t.isAlive()) // precheck that t is startable
                        throw new IllegalThreadStateException();
                    // 将Worker对象(w)添加到"线程池的Worker集合(workers)"中
                    workers.add(w);
                    // 更新largestPoolSize
                    int s = workers.size();
                    if (s > largestPoolSize)
                        largestPoolSize = s;
                    workerAdded = true;
                }
            } finally {
                // 释放锁
                mainLock.unlock();
            }
            // 如果"成功将任务添加到线程池"中，则启动任务所在的线程。 
            if (workerAdded) {
                t.start();
                workerStarted = true;
            }
        }
    } finally {
        if (! workerStarted)
            addWorkerFailed(w);
    }
    // 返回任务是否启动。
    return workerStarted;
}
}}}
	
	

==== 关闭“线程池” ====
	public void shutdown() {
		final ReentrantLock mainLock = this.mainLock;
		// 获取锁
		mainLock.lock();
		try {
			// 检查终止线程池的“线程”是否有权限。
			checkShutdownAccess();
			// 设置线程池的状态为关闭状态。
			advanceRunState(SHUTDOWN);
			// 中断线程池中空闲的线程。
			interruptIdleWorkers();
			// 钩子函数，在ThreadPoolExecutor中没有任何动作。
			onShutdown(); // hook for ScheduledThreadPoolExecutor
		} finally {
			// 释放锁
			mainLock.unlock();
		}
		// 尝试终止线程池
		tryTerminate();
	}
	

===== 线程池的生命周期 =====
	本章介绍线程池的生命周期。在"Java多线程系列--“基础篇”01之 基本概念"中，我们介绍过，**线程有5种状态：新建状态，就绪状态，运行状态，阻塞状态，死亡状态**。线程池也有5种状态；然而，线程池不同于线程，线程池的5种状态是：**Running, SHUTDOWN, STOP, TIDYING, TERMINATED。**
	
	线程池状态定义代码如下：

	private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));
	private static final int COUNT_BITS = Integer.SIZE - 3;
	private static final int CAPACITY = (1 << COUNT_BITS) - 1;
	
	private static final int RUNNING = -1 << COUNT_BITS;
	private static final int SHUTDOWN = 0 << COUNT_BITS;
	private static final int STOP = 1 << COUNT_BITS;
	private static final int TIDYING = 2 << COUNT_BITS;
	private static final int TERMINATED = 3 << COUNT_BITS;
	private static int ctlOf(int rs, int wc) { return rs | wc; }

	说明：
	ctl是一个AtomicInteger类型的原子对象。ctl记录了"线程池中的任务数量"和"线程池状态"2个信息。
	ctl共包括32位。其中，高3位表示"线程池状态"，低29位表示"线程池中的任务数量"。
	
	RUNNING    -- 对应的高3位值是111。
	SHUTDOWN   -- 对应的高3位值是000。
	STOP       -- 对应的高3位值是001。
	TIDYING    -- 对应的高3位值是010。
	TERMINATED -- 对应的高3位值是011。
	
	线程池各个状态之间的切换如下图所示：
	
	{{./pasted_image005.png}}
	


==== 1. RUNNING ====

(01) 状态说明：线程池处在RUNNING状态时，能够接收新任务，以及对已添加的任务进行处理。
(02) 状态切换：线程池的初始化状态是RUNNING。换句话说，线程池被一旦被创建，就处于RUNNING状态！
道理很简单，在ctl的初始化代码中(如下)，就将它初始化为RUNNING状态，并且"任务数量"初始化为0。

private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));
 

==== 2. SHUTDOWN ====

(01) 状态说明：线程池处在SHUTDOWN状态时，不接收新任务，但能处理已添加的任务。
(02) 状态切换：调用线程池的shutdown()接口时，线程池由RUNNING -> SHUTDOWN。

 

==== 3. STOP ====

(01) 状态说明：线程池处在STOP状态时，不接收新任务，不处理已添加的任务，并且会中断正在处理的任务。
(02) 状态切换：调用线程池的shutdownNow()接口时，线程池由(RUNNING or SHUTDOWN ) -> STOP。

 

==== 4. TIDYING ====

(01) 状态说明：当所有的任务已终止，ctl记录的"任务数量"为0，线程池会变为TIDYING状态。当线程池变为TIDYING状态时，会执行钩子函数terminated()。terminated()在ThreadPoolExecutor类中是空的，若用户想在线程池变为TIDYING时，进行相应的处理；可以通过重载terminated()函数来实现。
(02) 状态切换：当线程池在SHUTDOWN状态下，阻塞队列为空并且线程池中执行的任务也为空时，就会由 SHUTDOWN -> TIDYING。
当线程池在STOP状态下，线程池中执行的任务为空时，就会由STOP -> TIDYING。

 

==== 5. TERMINATED ====

(01) 状态说明：线程池彻底终止，就变成TERMINATED状态。
(02) 状态切换：线程池处在TIDYING状态时，执行完terminated()之后，就会由 TIDYING -> TERMINATED。

===== 拒绝策略 =====
	线程池的拒绝策略，是指当任务添加到线程池中被拒绝，而采取的处理措施。
	当任务添加到线程池中之所以被拒绝，可能是由于：第一，线程池异常关闭。第二，任务数量超过线程池的最大限制。
	
	线程池共包括4种拒绝策略，它们分别是：AbortPolicy, CallerRunsPolicy, DiscardOldestPolicy和DiscardPolicy。
	
	**AbortPolicy         -- 当任务添加到线程池中被拒绝时，它将抛出 RejectedExecutionException 异常。**
	**CallerRunsPolicy    -- 当任务添加到线程池中被拒绝时，会在线程池当前正在运行的Thread线程池中处理被拒绝的任务。**
	**DiscardOldestPolicy -- 当任务添加到线程池中被拒绝时，线程池会放弃等待队列中最旧的未处理任务，然后将被拒绝的任务添加到等待队列中。**
	**DiscardPolicy       -- 当任务添加到线程池中被拒绝时，线程池将丢弃被拒绝的任务。**
	
===== Callable和Future =====
	Callable 和 Future 是比较有趣的一对组合。当我们需要获取线程的执行结果时，就需要用到它们。Callable用于产生结果，Future用于获取结果。
	
==== Callable ====
	Callable 是一个接口，它只包含一个call()方法。Callable是一个返回结果并且可能抛出异常的任务。
	为了便于理解，我们可以将Callable比作一个Runnable接口，而Callable的call()方法则类似于Runnable的run()方法。
	Callable的源码如下：
	
	public interface Callable<V> {
		V call() throws Exception;
	}
	
	
==== Future ====
	Future 是一个接口。它用于**表示异步计算的结果**。**提供了检查计算是否完成的方法，以等待计算的完成，并获取计算的结果。**
	
	Future的源码如下：
	public interface Future<V> {
		// 试图取消对此任务的执行。
		boolean     cancel(boolean mayInterruptIfRunning)
	
		// 如果在任务正常完成前将其取消，则返回 true。
		boolean     isCancelled()
	
		// 如果任务已完成，则返回 true。
		boolean     isDone()
	
		// 如有必要，等待计算完成，然后获取其结果。
		V           get() throws InterruptedException, ExecutionException;
	
		// 如有必要，最多等待为使计算完成所给定的时间之后，获取其结果（如果结果可用）。
		V             get(long timeout, TimeUnit unit)
			  throws InterruptedException, ExecutionException, TimeoutException;
	}
	
	说明： Future用于表示异步计算的结果。它的实现类是FutureTask，在讲解FutureTask之前，我们先看看Callable, Future, FutureTask它们之间的关系图，如下：
	{{./pasted_image006.png}}
	
	说明：
	(01) RunnableFuture是一个接口，它继承了Runnable和Future这两个接口。RunnableFuture的源码如下：
	
	public interface RunnableFuture<V> extends Runnable, Future<V> {
		void run();
	}
	(02) FutureTask实现了RunnableFuture接口。所以，我们也说它实现了Future接口。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	




	
	
	
	
	
	
	
	
