Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-06T20:12:17+08:00

====== 总体框架 ======
Created 星期一 06 三月 2017

===== Java集合包 =====

	Java集合是java提供的工具包，包含了常用的数据结构：集合、链表、队列、栈、数组、映射等。Java集合工具包位置是java.util.*
	Java集合主要可以划分为4个部分：List列表、Set集合、Map映射、工具类(Iterator迭代器、Enumeration枚举类、Arrays和Collections)、。
	Java集合工具包框架图(如下)：
	
	{{./pasted_image.png}}


==== 1. List的实现类主要有: LinkedList, ArrayList, Vector, Stack。 ====
	
	(01) **LinkedList**是双向链表实现的**双端队列**；它**不是线程安全的**，只适用于单线程。
	(02) **ArrayList**是**数组实现**的队列，它是一个动态数组；它也**不是线程安全**的，只适用于单线程。
	(03) **Vector**是**数组实现的矢量队列**，它也一个动态数组；不过和ArrayList不同的是，**Vector是线程安全的，它支持并发**。
	(04) **Stack是Vector实现的栈**；和Vector一样，它也是线程安全的。


==== 2. Set的实现类主要有: HastSet和TreeSet。 ====
	
	(01) **HashSet**是一个没有重复元素的集合，它通过**HashMap**实现的；HashSet**不是线程安全的**，只适用于单线程。
	(02) **TreeSet**也是一个没有重复元素的集合，不过和HashSet不同的是，**TreeSet中的元素是有序的**；它是通**过TreeMap**实现的；TreeSet也不是线程安全的，只适用于单线程。


==== 3.Map的实现类主要有: HashMap，WeakHashMap, Hashtable和TreeMap。 ====
	
	(01) **HashMap**是存储“键-值对”的哈希表；它**不是线程安全的**，只适用于单线程。
	(02) **WeakHashMap**是也是哈希表；和HashMap不同的是，**HashMap的“键”是强引用类型，而WeakHashMap的“键”是弱引用类**型，也就是说**当WeakHashMap 中的某个键不再正常使用时，会被从WeakHashMap中被自动移除**。WeakHashMap也不是线程安全的，只适用于单线程。
	(03) **Hashtable**也是哈希表；和HashMap不同的是，**Hashtable是线程安全的**，支持并发。
	(04) **TreeMap**也是哈希表，不过TreeMap中的“键-值对”是有序的，它是通过**R-B Tree(红黑树)**实现的；TreeMap不是线程安全的，只适用于单线程。
	
		为了方便，我们将前面介绍集合类统称为”java集合包“。java集合包大多是“非线程安全的”，虽然可以通过Collections工具类中的方法获取java集合包对应的同步类，但是这些同步类的并发效率并不是很高。为了更好的支持高并发任务，并发大师Doug Lea在JUC(java.util.concurrent)包中添加了java集合包中单线程类的对应的支持高并发的类。例如，ArrayList对应的高并发类是CopyOnWriteArrayList，HashMap对应的高并发类是ConcurrentHashMap，等等。
	
		JUC包在添加”java集合包“对应的高并发类时，为了保持API接口的一致性，使用了”Java集合包“中的框架。例如，CopyOnWriteArrayList实现了“Java集合包”中的List接口，HashMap继承了“java集合包”中的AbstractMap类，等等。得益于“JUC包使用了Java集合包中的类”，如果我们了解了Java集合包中的类的思想之后，理解JUC包中的类也相对容易；理解时，最大的难点是，对JUC包是如何添加对“高并发”的支持的！
		

==== 4.接口 ====

	

===== JUC中的集合类 =====

==== List和Set ====
	JUC集合包中的List和Set实现类包括: **CopyOnWriteArrayList**, **CopyOnWriteArraySet和ConcurrentSkipListSet**。
	{{./pasted_image001.png}}
	(01) CopyOnWriteArrayList相当于线程安全的ArrayList，它实现了List接口。CopyOnWriteArrayList是支持高并发的。
	(02) CopyOnWriteArraySet相当于线程安全的HashSet，它继承于AbstractSet类。CopyOnWriteArraySet内部包含一个CopyOnWriteArrayList对象，它是通过CopyOnWriteArrayList实现的。


==== Map ====
	UC集合包中Map的实现类包括: **ConcurrentHashMap和ConcurrentSkipListMap**。它们的框架如下图所示：
	{{./pasted_image002.png}}
	(01) **ConcurrentHashMap**是线程安全的哈希表(相当于线程安全的HashMap)；它继承于AbstractMap类，并且实现ConcurrentMap接口。ConcurrentHashMap是通过“**锁分段**”来实现的，它支持并发。
	(02) **ConcurrentSkipListMap**是线程安全的**有序**的哈希表(**相当于线程安全的TreeMap**); 它继承于AbstractMap类，并且实现ConcurrentNavigableMap接口。ConcurrentSkipListMap是通过“**跳表**”来实现的，它支持并发。
	(03) **ConcurrentSkipListSet**是线程安全的**有序**的集合(相当于线程安全的TreeSet)；它继承于AbstractSet，并实现了NavigableSet接口。**ConcurrentSkipListSet是通过ConcurrentSkipListMap实现的**，它也支持并发。


==== Queue ====
	JUC集合包中Queue的实现类包括: **ArrayBlockingQueue**, **LinkedBlockingQueue**, **LinkedBlockingDeque**, **ConcurrentLinkedQueue和ConcurrentLinkedDeque**。它们的框架如下图所示：
	{{./pasted_image003.png}}
	
	(01) **ArrayBlockingQueue**是数组实现的线程安全的**有界**的阻塞队列。
	(02) **LinkedBlockingQueue**是**单向链表**实现的(指定大小)阻塞队列，该队列按 FIFO（先进先出）排序元素。
	(03) **LinkedBlockingDeque**是**双向链表**实现的(指定大小)双向并发阻塞队列，该阻塞队列同时支持FIFO和FILO两种操作方式。
	(04) **ConcurrentLinkedQueue**是**单向链表**实现的**无界队列**，该队列按 FIFO（先进先出）排序元素。
	(05) **ConcurrentLinkedDeque**是**双向链表**实现的**无界队列**，该队列同时支持FIFO和FILO两种操作方式。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
