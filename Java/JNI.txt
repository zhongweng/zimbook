Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-04T17:11:22+08:00

====== JNI ======
Created 星期六 04 三月 2017

Java不是完美的，Java的不足除了体现在运行速度上要比传统的C++慢许多之外，Java无法直接访问到操作系统底层（如系统硬件等)，为此**Java使用native方法来扩展Java程序的功能**。 

===== 适用的情况 =====

	　　1.为了使用底层的主机平台的某个特性，而这个特性不能通过JAVA API访问 
	
	　　2.为了访问一个老的系统或者使用一个已有的库，而这个系统或这个库不是用JAVA编写的 
	
	　　3.为了加快程序的性能，而将一段时间敏感的代码作为本地方法实现。 


===== 实现步骤 =====
	可以将native方法比作Java程序同Ｃ程序的接口，其实现步骤：

　　１、在Java中声明native()方法，然后编译； 

　　２、用javah产生一个.h文件； 

　　３、写一个.cpp文件实现native导出方法，其中需要包含第二步产生的.h文件（注意其中又包含了JDK带的jni.h文件）； 

　　４、将第三步的.cpp文件编译成动态链接库文件； 

　　５、在Java中用System.loadLibrary()方法加载第四步产生的动态链接库文件，这个native()方法就可以在Java中被访问了。 

===== 实例 =====
	下面我们开始编写HelloWorld程序，由于涉及到要编写c/c++代码因此我们会在开发中使用Microsoft VC++工具。
	
	* 编写java代码
	我们在硬盘上建立一个hello目录作为我们的工作目录，首先我们需要编写自己的java代码，在java代码中我们会声明native方法，代码非常简单。如下所示
{{{code: lang="java" linenumbers="True"
	class HelloWorld 
	{
		public native void displayHelloWorld();
		static {
			System.loadLibrary("hello");
		}
	    
		public static void main(String[] args) {
			new HelloWorld().displayHelloWorld();
		}
	}
}}}
	
	注 意我们的displayHelloWorld()方法的声明，它有一个关键字native，表明这个方法使用java以外的语言实现。方法不包括实现，因 为我们要用c/c++语言实现它。注意System.loadLibrary("hello")这句代码，它是在静态初始化块中定义的，系统用来装载 hello共享库，这就是我们在后面生成的hello.dll（如果在其他的操作系统可能是其他的形式，比如hello.so）
	* 编译java代码
	javac HelloWorld.java  生成HelloWorld.class文件
	* 创建.h文件
	这一步中我们要使用javah命令生成.h文件，这个文件要在后面的c/c++代码中用到，我们运行
	javah HelloWorld。这样我们可以看到在相同目录下生成了一个HelloWorld.h文件，文件内容如下
	在此我们不对他进行太多的解释。
{{{code: lang="cpp" linenumbers="True"
	/* DO NOT EDIT THIS FILE - it is machine generated */
	#include <jni.h>
	/* Header for class HelloWorld */
	#ifndef _Included_HelloWorld
	#define _Included_HelloWorld
	#ifdef __cplusplus
	extern "C" {
	#endif
	/*
	 * Class:     HelloWorld
	 * Method:    displayHelloWorld
	 * Signature: ()V
	 */
	JNIEXPORT void JNICALL Java_HelloWorld_displayHelloWorld
	  (JNIEnv *, jobject);
	#ifdef __cplusplus
	}
	#endif
	#endif
}}}
	
	* 编写本地实现代码
	在这部分我们要用C/C++语言实现java中定义的方法，我们在VC++中新建一个Project,然后创建一个HelloWorldImp.cpp文件，内容如下
{{{code: lang="cpp" linenumbers="True"
	#include <jni.h>
	#include "HelloWorld.h"
	#include <stdio.h>
	
	JNIEXPORT void JNICALL 
	Java_HelloWorld_displayHelloWorld(JNIEnv *env, jobject obj) 
	{
		printf("Hello world!\n");
		return;
	}
}}}
	
	**注意我们这里include了 jni.h和刚才得到的HelloWorld.h文件。因此你要在VC++里面设置好，jni.h在JAVA_HOME/include里面**。编译通过后再生成hello.dll文件。
	* 运行java程序
	把上面生成的hello.dll文件复制到我们的工作目录，这时候我们的目录中包括HelloWorld.java，HelloWorld.class和hello.dll文件。运行java HelloWorld命令，则可在控制台看到Hello world|
	的输出了。
