Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2017-03-02T21:59:49+08:00

====== 引用 ======
Created 星期四 02 三月 2017

===== 强引用(Strong Reference) =====
	强引用就是我们经常使用的引用，其写法如下
	
	**Widget widget = new Widget();**

	强引用最重要的就是它能够让引用变得强（Strong），这就决定了它和垃圾回收器的交互。具体来说，如果一个对象通过一串强引用链接可到达(Strongly reachable)，它是不会被回收的。如果你不想让你正在使用的对象被回收，这就正是你所需要的。
	比如有强引用map,当不用时,不手动释放的话会有内存泄露.
	
	**serialNumberMap.put(widget, widgetSerialNumber);**


===== 软引用（Soft Reference） =====
	如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。**软引用可用来实现内存敏感的高速缓存**。
	这样的话，你就可以节省了很多事情，垃圾回收器会关心当前哪种可到达类型以及内存的消耗程度来进行处理。
	
	**String str=new String("abc");                                     // 强引用  **
	**SoftReference<String> softRef=new SoftReference<String>(str);     // 软引用**  
	
	软引用在实际中有重要的应用，例如浏览器的后退按钮。按后退时，这个后退时显示的网页内容是重新进行请求还是从缓存中取出呢？这就要看具体的实现策略了。
	（**1）如果一个网页在浏览结束时就进行内容的回收，则按后退查看前面浏览过的页面时，需要重新构建**
	**（2）如果将浏览过的网页存储到内存中会造成内存的大量浪费，甚至会造成内存溢出**
	**这时候就可以使用软引用**
	
{{{code: lang="java" linenumbers="True"
Browser prev = new Browser();               // 获取页面进行浏览  
SoftReference sr = new SoftReference(prev); // 浏览完毕后置为软引用         
if(sr.get()!=null){   
    rev = (Browser) sr.get();           // 还没有被回收器回收，直接获取  
}else{  
    prev = new Browser();               // 由于内存吃紧，所以对软引用的对象回收了  
    sr = new SoftReference(prev);       // 重新构建  
}  
}}}
	
	软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中。


===== 弱引用(Weak Reference) =====
	 弱引用与软引用的区别在于：**只具有弱引用的对象拥有更短暂的生命周期**。在垃圾回收器线程扫描它所管辖的内存区域的过程中，**一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存**。**不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。也可以一定程度的做缓存率不高的缓存.**
	
	**String str=new String("abc");      **
	**WeakReference<String> abcWeakRef = new WeakReference<String>(str);  **
	**str=null;**
	
	**如果这个对象是偶尔的使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用 Weak Reference 来记住此对象。**   下面的代码会让str再次变为一个强引用：
	
	**String  abc = abcWeakRef.get();**
	
	弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。
	当你想引用一个对象，但是这个对象有自己的生命周期，你不想介入这个对象的生命周期，这时候你就是用弱引用。
{{{code: lang="java" linenumbers="True"
public class ReferenceTest {  
  
    private static ReferenceQueue<VeryBig> rq = new ReferenceQueue<VeryBig>();  
  
    public static void checkQueue() {  
        Reference<? extends VeryBig> ref = null;  
        while ((ref = rq.poll()) != null) {  
            if (ref != null) {  
                System.out.println("In queue: " + ((VeryBigWeakReference) (ref)).id);  
            }  
        }  
    }  
  
    public static void main(String args[]) {  
        int size = 3;  
        LinkedList<WeakReference<VeryBig>> weakList = new LinkedList<WeakReference<VeryBig>>();  
        for (int i = 0; i < size; i++) {  
            weakList.add(new VeryBigWeakReference(new VeryBig("Weak " + i), rq));  
            System.out.println("Just created weak: " + weakList.getLast());  
  
        }  
  
        System.gc();   
        try { // 下面休息几分钟，让上面的垃圾回收线程运行完成  
            Thread.currentThread().sleep(6000);  
        } catch (InterruptedException e) {  
            e.printStackTrace();  
        }  
        checkQueue();  
    }  
}  
  
class VeryBig {  
    public String id;  
    // 占用空间,让线程进行回收  
    byte[] b = new byte[2 * 1024];  
  
    public VeryBig(String id) {  
        this.id = id;  
    }  
  
    protected void finalize() {  
        System.out.println("Finalizing VeryBig " + id);  
    }  
}  
  
class VeryBigWeakReference extends WeakReference<VeryBig> {  
    public String id;  
  
    public VeryBigWeakReference(VeryBig big, ReferenceQueue<VeryBig> rq) {  
        super(big, rq);  
        this.id = big.id;  
    }  
  
    protected void finalize() {  
        System.out.println("Finalizing VeryBigWeakReference " + id);  
    }  
}  
}}}
	
	

	**要解决无需手动释放的问题,可使用:**
	最简单的办法就是使用Java内置的WeakHashMap类。WeakHashMap和HashMap几乎一样，唯一的区别就是它的**键（不是值!!!）使用WeakReference引用**。当WeakHashMap的键标记为垃圾的时候，这个键对应的条目就会自动被移除。这就避免了上面需要的Widget对象手动删除的问题。使用WeakHashMap可以很便捷地转为HashMap或者Map。

===== 虚引用（PhantomReference） =====
	 “虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。**如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。**
	虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：**虚引用必须和引用队列 （ReferenceQueue）联合使用**。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。


===== 引用队列(Reference Queue) =====

	一旦弱引用对象开始返回null，该弱引用指向的对象就被标记成了垃圾。而这个弱引用对象（非其指向的对象）就没有什么用了。通常这时候需要进行一些清理工作。比如WeakHashMap会在这时候移除没用的条目来避免保存无限制增长的没有意义的弱引用。
	
	引用队列可以很容易地实现跟踪不需要的引用。当你在构造WeakReference时传入一个ReferenceQueue对象，当该引用指向的对象被标记为垃圾的时候，这个引用对象会自动地加入到引用队列里面。接下来，你就可以在固定的周期，处理传入的引用队列，比如做一些清理工作来处理这些没有用的引用对象。
	

===== 总结 =====
	Java4种引用的级别由高到低依次为：
	
	**强引用  >  软引用  >  弱引用  >  虚引用**
	
	通过图来看一下他们之间在垃圾回收时的区别:
	{{./pasted_image.png}}
	
	当垃圾回收器回收时，某些对象会被回收，某些不会被回收。垃圾回收器会从根对象Object来标记存活的对象，然后将某些不可达的对象和一些引用的对象进行回收.
	{{./pasted_image001.png}}
	



	
	
	
	
	
